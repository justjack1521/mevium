// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protoidentity/player.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mobius.Proto.Identity {

  /// <summary>Holder for reflection information generated from protoidentity/player.proto</summary>
  public static partial class PlayerReflection {

    #region Descriptor
    /// <summary>File descriptor for protoidentity/player.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chpwcm90b2lkZW50aXR5L3BsYXllci5wcm90bxIIaWRlbnRpdHkiUwoTUHJv",
            "dG9QbGF5ZXJJZGVudGl0eRIRCglwbGF5ZXJfaWQYASABKAkSEwoLcGxheWVy",
            "X25hbWUYAiABKAkSFAoMcGxheWVyX2xldmVsGAMgASgFIrABChpQcm90b1Bs",
            "YXllckxvYWRvdXRJZGVudGl0eRITCgtqb2JfY2FyZF9pZBgBIAEoCRIVCg1z",
            "dWJfam9iX2luZGV4GAIgASgFEhEKCXdlYXBvbl9pZBgDIAEoCRIZChFzdWJf",
            "d2VhcG9uX3VubG9jaxgEIAEoBRI4Cg1hYmlsaXR5X2NhcmRzGAUgAygLMiEu",
            "aWRlbnRpdHkuUHJvdG9QbGF5ZXJDYXJkSWRlbnRpdHkirwEKF1Byb3RvUGxh",
            "eWVyQ2FyZElkZW50aXR5EhcKD2FiaWxpdHlfY2FyZF9pZBgBIAEoCRIaChJh",
            "YmlsaXR5X2NhcmRfbGV2ZWwYAiABKAUSFQoNYWJpbGl0eV9sZXZlbBgDIAEo",
            "BRIaChJleHRyYV9za2lsbF91bmxvY2sYBCABKAUSGAoQb3Zlcl9ib29zdF9s",
            "ZXZlbBgFIAEoBRISCgpzbG90X2luZGV4GAYgASgFIqwBChJQcm90b1BsYXll",
            "ckxvYWRvdXQSEgoKZGVja19pbmRleBgBIAEoBRIoCghqb2JfY2FyZBgCIAEo",
            "CzIWLmlkZW50aXR5LlByb3RvSm9iQ2FyZBIlCgZ3ZWFwb24YAyABKAsyFS5p",
            "ZGVudGl0eS5Qcm90b1dlYXBvbhIxCg1hYmlsaXR5X2NhcmRzGAUgAygLMhou",
            "aWRlbnRpdHkuUHJvdG9BYmlsaXR5Q2FyZCKoAwoMUHJvdG9Kb2JDYXJkEhMK",
            "C2Jhc2Vfam9iX2lkGAEgASgJEhUKDXN1Yl9qb2JfaW5kZXgYAiABKAUSEwoL",
            "aHBfc3RhdF9tb2QYAyABKAUSFwoPYXR0YWNrX3N0YXRfbW9kGAQgASgFEhYK",
            "DmJyZWFrX3N0YXRfbW9kGAUgASgFEhYKDm1hZ2ljX3N0YXRfbW9kGAYgASgF",
            "EhYKDnNwZWVkX3N0YXRfbW9kGAcgASgFEhgKEGRlZmVuc2Vfc3RhdF9tb2QY",
            "CCABKAUSHAoUY3JpdF9jaGFuY2Vfc3RhdF9tb2QYCSABKAUSFgoOdWx0aW1h",
            "dGVfYm9vc3QYCiABKAUSGAoQb3Zlcl9ib29zdF9sZXZlbBgLIAEoBRJBCg5h",
            "dXRvX2FiaWxpdGllcxgMIAMoCzIpLmlkZW50aXR5LlByb3RvSm9iQ2FyZC5B",
            "dXRvQWJpbGl0aWVzRW50cnkSEwoLY3Jvd25fbGV2ZWwYDSABKAUaNAoSQXV0",
            "b0FiaWxpdGllc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoBToC",
            "OAEi/gIKC1Byb3RvV2VhcG9uEhYKDmJhc2Vfd2VhcG9uX2lkGAEgASgJEhkK",
            "EXN1Yl93ZWFwb25fdW5sb2NrGAIgASgFEhMKC2hwX3N0YXRfbW9kGAMgASgF",
            "EhcKD2F0dGFja19zdGF0X21vZBgEIAEoBRIWCg5icmVha19zdGF0X21vZBgF",
            "IAEoBRIWCg5tYWdpY19zdGF0X21vZBgGIAEoBRIWCg5zcGVlZF9zdGF0X21v",
            "ZBgHIAEoBRIYChBkZWZlbnNlX3N0YXRfbW9kGAggASgFEhwKFGNyaXRfY2hh",
            "bmNlX3N0YXRfbW9kGAkgASgFEhYKDnVsdGltYXRlX2Jvb3N0GAogASgFEkAK",
            "DmF1dG9fYWJpbGl0aWVzGAsgAygLMiguaWRlbnRpdHkuUHJvdG9XZWFwb24u",
            "QXV0b0FiaWxpdGllc0VudHJ5GjQKEkF1dG9BYmlsaXRpZXNFbnRyeRILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKAU6AjgBIqUCChBQcm90b0FiaWxpdHlD",
            "YXJkEhcKD2FiaWxpdHlfY2FyZF9pZBgBIAEoCRIaChJhYmlsaXR5X2NhcmRf",
            "bGV2ZWwYAiABKAUSFQoNYWJpbGl0eV9sZXZlbBgDIAEoBRIaChJleHRyYV9z",
            "a2lsbF91bmxvY2sYBCABKAUSGAoQb3Zlcl9ib29zdF9sZXZlbBgFIAEoBRJF",
            "Cg5hdXRvX2FiaWxpdGllcxgGIAMoCzItLmlkZW50aXR5LlByb3RvQWJpbGl0",
            "eUNhcmQuQXV0b0FiaWxpdGllc0VudHJ5EhIKCnNsb3RfaW5kZXgYFCABKAUa",
            "NAoSQXV0b0FiaWxpdGllc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoBToCOAFCU1o5Z2l0aHViLmNvbS9qdXN0amFjazE1MjEvbWV2aXVtL3Br",
            "Zy9nZW5wcm90by9wcm90b2lkZW50aXR5qgIVTW9iaXVzLlByb3RvLklkZW50",
            "aXR5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mobius.Proto.Identity.ProtoPlayerIdentity), global::Mobius.Proto.Identity.ProtoPlayerIdentity.Parser, new[]{ "PlayerId", "PlayerName", "PlayerLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mobius.Proto.Identity.ProtoPlayerLoadoutIdentity), global::Mobius.Proto.Identity.ProtoPlayerLoadoutIdentity.Parser, new[]{ "JobCardId", "SubJobIndex", "WeaponId", "SubWeaponUnlock", "AbilityCards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mobius.Proto.Identity.ProtoPlayerCardIdentity), global::Mobius.Proto.Identity.ProtoPlayerCardIdentity.Parser, new[]{ "AbilityCardId", "AbilityCardLevel", "AbilityLevel", "ExtraSkillUnlock", "OverBoostLevel", "SlotIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mobius.Proto.Identity.ProtoPlayerLoadout), global::Mobius.Proto.Identity.ProtoPlayerLoadout.Parser, new[]{ "DeckIndex", "JobCard", "Weapon", "AbilityCards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mobius.Proto.Identity.ProtoJobCard), global::Mobius.Proto.Identity.ProtoJobCard.Parser, new[]{ "BaseJobId", "SubJobIndex", "HpStatMod", "AttackStatMod", "BreakStatMod", "MagicStatMod", "SpeedStatMod", "DefenseStatMod", "CritChanceStatMod", "UltimateBoost", "OverBoostLevel", "AutoAbilities", "CrownLevel" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mobius.Proto.Identity.ProtoWeapon), global::Mobius.Proto.Identity.ProtoWeapon.Parser, new[]{ "BaseWeaponId", "SubWeaponUnlock", "HpStatMod", "AttackStatMod", "BreakStatMod", "MagicStatMod", "SpeedStatMod", "DefenseStatMod", "CritChanceStatMod", "UltimateBoost", "AutoAbilities" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mobius.Proto.Identity.ProtoAbilityCard), global::Mobius.Proto.Identity.ProtoAbilityCard.Parser, new[]{ "AbilityCardId", "AbilityCardLevel", "AbilityLevel", "ExtraSkillUnlock", "OverBoostLevel", "AutoAbilities", "SlotIndex" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ProtoPlayerIdentity : pb::IMessage<ProtoPlayerIdentity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtoPlayerIdentity> _parser = new pb::MessageParser<ProtoPlayerIdentity>(() => new ProtoPlayerIdentity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoPlayerIdentity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mobius.Proto.Identity.PlayerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerIdentity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerIdentity(ProtoPlayerIdentity other) : this() {
      playerId_ = other.playerId_;
      playerName_ = other.playerName_;
      playerLevel_ = other.playerLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerIdentity Clone() {
      return new ProtoPlayerIdentity(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_level" field.</summary>
    public const int PlayerLevelFieldNumber = 3;
    private int playerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLevel {
      get { return playerLevel_; }
      set {
        playerLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoPlayerIdentity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoPlayerIdentity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (PlayerName != other.PlayerName) return false;
      if (PlayerLevel != other.PlayerLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (PlayerLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (PlayerLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (PlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoPlayerIdentity other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.PlayerLevel != 0) {
        PlayerLevel = other.PlayerLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 24: {
            PlayerLevel = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 24: {
            PlayerLevel = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProtoPlayerLoadoutIdentity : pb::IMessage<ProtoPlayerLoadoutIdentity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtoPlayerLoadoutIdentity> _parser = new pb::MessageParser<ProtoPlayerLoadoutIdentity>(() => new ProtoPlayerLoadoutIdentity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoPlayerLoadoutIdentity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mobius.Proto.Identity.PlayerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerLoadoutIdentity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerLoadoutIdentity(ProtoPlayerLoadoutIdentity other) : this() {
      jobCardId_ = other.jobCardId_;
      subJobIndex_ = other.subJobIndex_;
      weaponId_ = other.weaponId_;
      subWeaponUnlock_ = other.subWeaponUnlock_;
      abilityCards_ = other.abilityCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerLoadoutIdentity Clone() {
      return new ProtoPlayerLoadoutIdentity(this);
    }

    /// <summary>Field number for the "job_card_id" field.</summary>
    public const int JobCardIdFieldNumber = 1;
    private string jobCardId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobCardId {
      get { return jobCardId_; }
      set {
        jobCardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sub_job_index" field.</summary>
    public const int SubJobIndexFieldNumber = 2;
    private int subJobIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubJobIndex {
      get { return subJobIndex_; }
      set {
        subJobIndex_ = value;
      }
    }

    /// <summary>Field number for the "weapon_id" field.</summary>
    public const int WeaponIdFieldNumber = 3;
    private string weaponId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sub_weapon_unlock" field.</summary>
    public const int SubWeaponUnlockFieldNumber = 4;
    private int subWeaponUnlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubWeaponUnlock {
      get { return subWeaponUnlock_; }
      set {
        subWeaponUnlock_ = value;
      }
    }

    /// <summary>Field number for the "ability_cards" field.</summary>
    public const int AbilityCardsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Mobius.Proto.Identity.ProtoPlayerCardIdentity> _repeated_abilityCards_codec
        = pb::FieldCodec.ForMessage(42, global::Mobius.Proto.Identity.ProtoPlayerCardIdentity.Parser);
    private readonly pbc::RepeatedField<global::Mobius.Proto.Identity.ProtoPlayerCardIdentity> abilityCards_ = new pbc::RepeatedField<global::Mobius.Proto.Identity.ProtoPlayerCardIdentity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mobius.Proto.Identity.ProtoPlayerCardIdentity> AbilityCards {
      get { return abilityCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoPlayerLoadoutIdentity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoPlayerLoadoutIdentity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JobCardId != other.JobCardId) return false;
      if (SubJobIndex != other.SubJobIndex) return false;
      if (WeaponId != other.WeaponId) return false;
      if (SubWeaponUnlock != other.SubWeaponUnlock) return false;
      if(!abilityCards_.Equals(other.abilityCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JobCardId.Length != 0) hash ^= JobCardId.GetHashCode();
      if (SubJobIndex != 0) hash ^= SubJobIndex.GetHashCode();
      if (WeaponId.Length != 0) hash ^= WeaponId.GetHashCode();
      if (SubWeaponUnlock != 0) hash ^= SubWeaponUnlock.GetHashCode();
      hash ^= abilityCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (JobCardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(JobCardId);
      }
      if (SubJobIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SubJobIndex);
      }
      if (WeaponId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WeaponId);
      }
      if (SubWeaponUnlock != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SubWeaponUnlock);
      }
      abilityCards_.WriteTo(output, _repeated_abilityCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (JobCardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(JobCardId);
      }
      if (SubJobIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SubJobIndex);
      }
      if (WeaponId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WeaponId);
      }
      if (SubWeaponUnlock != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SubWeaponUnlock);
      }
      abilityCards_.WriteTo(ref output, _repeated_abilityCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JobCardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobCardId);
      }
      if (SubJobIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubJobIndex);
      }
      if (WeaponId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WeaponId);
      }
      if (SubWeaponUnlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubWeaponUnlock);
      }
      size += abilityCards_.CalculateSize(_repeated_abilityCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoPlayerLoadoutIdentity other) {
      if (other == null) {
        return;
      }
      if (other.JobCardId.Length != 0) {
        JobCardId = other.JobCardId;
      }
      if (other.SubJobIndex != 0) {
        SubJobIndex = other.SubJobIndex;
      }
      if (other.WeaponId.Length != 0) {
        WeaponId = other.WeaponId;
      }
      if (other.SubWeaponUnlock != 0) {
        SubWeaponUnlock = other.SubWeaponUnlock;
      }
      abilityCards_.Add(other.abilityCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            JobCardId = input.ReadString();
            break;
          }
          case 16: {
            SubJobIndex = input.ReadInt32();
            break;
          }
          case 26: {
            WeaponId = input.ReadString();
            break;
          }
          case 32: {
            SubWeaponUnlock = input.ReadInt32();
            break;
          }
          case 42: {
            abilityCards_.AddEntriesFrom(input, _repeated_abilityCards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            JobCardId = input.ReadString();
            break;
          }
          case 16: {
            SubJobIndex = input.ReadInt32();
            break;
          }
          case 26: {
            WeaponId = input.ReadString();
            break;
          }
          case 32: {
            SubWeaponUnlock = input.ReadInt32();
            break;
          }
          case 42: {
            abilityCards_.AddEntriesFrom(ref input, _repeated_abilityCards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProtoPlayerCardIdentity : pb::IMessage<ProtoPlayerCardIdentity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtoPlayerCardIdentity> _parser = new pb::MessageParser<ProtoPlayerCardIdentity>(() => new ProtoPlayerCardIdentity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoPlayerCardIdentity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mobius.Proto.Identity.PlayerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerCardIdentity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerCardIdentity(ProtoPlayerCardIdentity other) : this() {
      abilityCardId_ = other.abilityCardId_;
      abilityCardLevel_ = other.abilityCardLevel_;
      abilityLevel_ = other.abilityLevel_;
      extraSkillUnlock_ = other.extraSkillUnlock_;
      overBoostLevel_ = other.overBoostLevel_;
      slotIndex_ = other.slotIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerCardIdentity Clone() {
      return new ProtoPlayerCardIdentity(this);
    }

    /// <summary>Field number for the "ability_card_id" field.</summary>
    public const int AbilityCardIdFieldNumber = 1;
    private string abilityCardId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AbilityCardId {
      get { return abilityCardId_; }
      set {
        abilityCardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ability_card_level" field.</summary>
    public const int AbilityCardLevelFieldNumber = 2;
    private int abilityCardLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityCardLevel {
      get { return abilityCardLevel_; }
      set {
        abilityCardLevel_ = value;
      }
    }

    /// <summary>Field number for the "ability_level" field.</summary>
    public const int AbilityLevelFieldNumber = 3;
    private int abilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityLevel {
      get { return abilityLevel_; }
      set {
        abilityLevel_ = value;
      }
    }

    /// <summary>Field number for the "extra_skill_unlock" field.</summary>
    public const int ExtraSkillUnlockFieldNumber = 4;
    private int extraSkillUnlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraSkillUnlock {
      get { return extraSkillUnlock_; }
      set {
        extraSkillUnlock_ = value;
      }
    }

    /// <summary>Field number for the "over_boost_level" field.</summary>
    public const int OverBoostLevelFieldNumber = 5;
    private int overBoostLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverBoostLevel {
      get { return overBoostLevel_; }
      set {
        overBoostLevel_ = value;
      }
    }

    /// <summary>Field number for the "slot_index" field.</summary>
    public const int SlotIndexFieldNumber = 6;
    private int slotIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotIndex {
      get { return slotIndex_; }
      set {
        slotIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoPlayerCardIdentity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoPlayerCardIdentity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityCardId != other.AbilityCardId) return false;
      if (AbilityCardLevel != other.AbilityCardLevel) return false;
      if (AbilityLevel != other.AbilityLevel) return false;
      if (ExtraSkillUnlock != other.ExtraSkillUnlock) return false;
      if (OverBoostLevel != other.OverBoostLevel) return false;
      if (SlotIndex != other.SlotIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityCardId.Length != 0) hash ^= AbilityCardId.GetHashCode();
      if (AbilityCardLevel != 0) hash ^= AbilityCardLevel.GetHashCode();
      if (AbilityLevel != 0) hash ^= AbilityLevel.GetHashCode();
      if (ExtraSkillUnlock != 0) hash ^= ExtraSkillUnlock.GetHashCode();
      if (OverBoostLevel != 0) hash ^= OverBoostLevel.GetHashCode();
      if (SlotIndex != 0) hash ^= SlotIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AbilityCardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AbilityCardId);
      }
      if (AbilityCardLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AbilityCardLevel);
      }
      if (AbilityLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AbilityLevel);
      }
      if (ExtraSkillUnlock != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ExtraSkillUnlock);
      }
      if (OverBoostLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OverBoostLevel);
      }
      if (SlotIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SlotIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AbilityCardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AbilityCardId);
      }
      if (AbilityCardLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AbilityCardLevel);
      }
      if (AbilityLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AbilityLevel);
      }
      if (ExtraSkillUnlock != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ExtraSkillUnlock);
      }
      if (OverBoostLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OverBoostLevel);
      }
      if (SlotIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SlotIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityCardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AbilityCardId);
      }
      if (AbilityCardLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityCardLevel);
      }
      if (AbilityLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityLevel);
      }
      if (ExtraSkillUnlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraSkillUnlock);
      }
      if (OverBoostLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverBoostLevel);
      }
      if (SlotIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoPlayerCardIdentity other) {
      if (other == null) {
        return;
      }
      if (other.AbilityCardId.Length != 0) {
        AbilityCardId = other.AbilityCardId;
      }
      if (other.AbilityCardLevel != 0) {
        AbilityCardLevel = other.AbilityCardLevel;
      }
      if (other.AbilityLevel != 0) {
        AbilityLevel = other.AbilityLevel;
      }
      if (other.ExtraSkillUnlock != 0) {
        ExtraSkillUnlock = other.ExtraSkillUnlock;
      }
      if (other.OverBoostLevel != 0) {
        OverBoostLevel = other.OverBoostLevel;
      }
      if (other.SlotIndex != 0) {
        SlotIndex = other.SlotIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AbilityCardId = input.ReadString();
            break;
          }
          case 16: {
            AbilityCardLevel = input.ReadInt32();
            break;
          }
          case 24: {
            AbilityLevel = input.ReadInt32();
            break;
          }
          case 32: {
            ExtraSkillUnlock = input.ReadInt32();
            break;
          }
          case 40: {
            OverBoostLevel = input.ReadInt32();
            break;
          }
          case 48: {
            SlotIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AbilityCardId = input.ReadString();
            break;
          }
          case 16: {
            AbilityCardLevel = input.ReadInt32();
            break;
          }
          case 24: {
            AbilityLevel = input.ReadInt32();
            break;
          }
          case 32: {
            ExtraSkillUnlock = input.ReadInt32();
            break;
          }
          case 40: {
            OverBoostLevel = input.ReadInt32();
            break;
          }
          case 48: {
            SlotIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProtoPlayerLoadout : pb::IMessage<ProtoPlayerLoadout>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtoPlayerLoadout> _parser = new pb::MessageParser<ProtoPlayerLoadout>(() => new ProtoPlayerLoadout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoPlayerLoadout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mobius.Proto.Identity.PlayerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerLoadout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerLoadout(ProtoPlayerLoadout other) : this() {
      deckIndex_ = other.deckIndex_;
      jobCard_ = other.jobCard_ != null ? other.jobCard_.Clone() : null;
      weapon_ = other.weapon_ != null ? other.weapon_.Clone() : null;
      abilityCards_ = other.abilityCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPlayerLoadout Clone() {
      return new ProtoPlayerLoadout(this);
    }

    /// <summary>Field number for the "deck_index" field.</summary>
    public const int DeckIndexFieldNumber = 1;
    private int deckIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeckIndex {
      get { return deckIndex_; }
      set {
        deckIndex_ = value;
      }
    }

    /// <summary>Field number for the "job_card" field.</summary>
    public const int JobCardFieldNumber = 2;
    private global::Mobius.Proto.Identity.ProtoJobCard jobCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mobius.Proto.Identity.ProtoJobCard JobCard {
      get { return jobCard_; }
      set {
        jobCard_ = value;
      }
    }

    /// <summary>Field number for the "weapon" field.</summary>
    public const int WeaponFieldNumber = 3;
    private global::Mobius.Proto.Identity.ProtoWeapon weapon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mobius.Proto.Identity.ProtoWeapon Weapon {
      get { return weapon_; }
      set {
        weapon_ = value;
      }
    }

    /// <summary>Field number for the "ability_cards" field.</summary>
    public const int AbilityCardsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Mobius.Proto.Identity.ProtoAbilityCard> _repeated_abilityCards_codec
        = pb::FieldCodec.ForMessage(42, global::Mobius.Proto.Identity.ProtoAbilityCard.Parser);
    private readonly pbc::RepeatedField<global::Mobius.Proto.Identity.ProtoAbilityCard> abilityCards_ = new pbc::RepeatedField<global::Mobius.Proto.Identity.ProtoAbilityCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mobius.Proto.Identity.ProtoAbilityCard> AbilityCards {
      get { return abilityCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoPlayerLoadout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoPlayerLoadout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeckIndex != other.DeckIndex) return false;
      if (!object.Equals(JobCard, other.JobCard)) return false;
      if (!object.Equals(Weapon, other.Weapon)) return false;
      if(!abilityCards_.Equals(other.abilityCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeckIndex != 0) hash ^= DeckIndex.GetHashCode();
      if (jobCard_ != null) hash ^= JobCard.GetHashCode();
      if (weapon_ != null) hash ^= Weapon.GetHashCode();
      hash ^= abilityCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DeckIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeckIndex);
      }
      if (jobCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(JobCard);
      }
      if (weapon_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Weapon);
      }
      abilityCards_.WriteTo(output, _repeated_abilityCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DeckIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeckIndex);
      }
      if (jobCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(JobCard);
      }
      if (weapon_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Weapon);
      }
      abilityCards_.WriteTo(ref output, _repeated_abilityCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeckIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeckIndex);
      }
      if (jobCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JobCard);
      }
      if (weapon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Weapon);
      }
      size += abilityCards_.CalculateSize(_repeated_abilityCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoPlayerLoadout other) {
      if (other == null) {
        return;
      }
      if (other.DeckIndex != 0) {
        DeckIndex = other.DeckIndex;
      }
      if (other.jobCard_ != null) {
        if (jobCard_ == null) {
          JobCard = new global::Mobius.Proto.Identity.ProtoJobCard();
        }
        JobCard.MergeFrom(other.JobCard);
      }
      if (other.weapon_ != null) {
        if (weapon_ == null) {
          Weapon = new global::Mobius.Proto.Identity.ProtoWeapon();
        }
        Weapon.MergeFrom(other.Weapon);
      }
      abilityCards_.Add(other.abilityCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeckIndex = input.ReadInt32();
            break;
          }
          case 18: {
            if (jobCard_ == null) {
              JobCard = new global::Mobius.Proto.Identity.ProtoJobCard();
            }
            input.ReadMessage(JobCard);
            break;
          }
          case 26: {
            if (weapon_ == null) {
              Weapon = new global::Mobius.Proto.Identity.ProtoWeapon();
            }
            input.ReadMessage(Weapon);
            break;
          }
          case 42: {
            abilityCards_.AddEntriesFrom(input, _repeated_abilityCards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DeckIndex = input.ReadInt32();
            break;
          }
          case 18: {
            if (jobCard_ == null) {
              JobCard = new global::Mobius.Proto.Identity.ProtoJobCard();
            }
            input.ReadMessage(JobCard);
            break;
          }
          case 26: {
            if (weapon_ == null) {
              Weapon = new global::Mobius.Proto.Identity.ProtoWeapon();
            }
            input.ReadMessage(Weapon);
            break;
          }
          case 42: {
            abilityCards_.AddEntriesFrom(ref input, _repeated_abilityCards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProtoJobCard : pb::IMessage<ProtoJobCard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtoJobCard> _parser = new pb::MessageParser<ProtoJobCard>(() => new ProtoJobCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoJobCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mobius.Proto.Identity.PlayerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoJobCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoJobCard(ProtoJobCard other) : this() {
      baseJobId_ = other.baseJobId_;
      subJobIndex_ = other.subJobIndex_;
      hpStatMod_ = other.hpStatMod_;
      attackStatMod_ = other.attackStatMod_;
      breakStatMod_ = other.breakStatMod_;
      magicStatMod_ = other.magicStatMod_;
      speedStatMod_ = other.speedStatMod_;
      defenseStatMod_ = other.defenseStatMod_;
      critChanceStatMod_ = other.critChanceStatMod_;
      ultimateBoost_ = other.ultimateBoost_;
      overBoostLevel_ = other.overBoostLevel_;
      autoAbilities_ = other.autoAbilities_.Clone();
      crownLevel_ = other.crownLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoJobCard Clone() {
      return new ProtoJobCard(this);
    }

    /// <summary>Field number for the "base_job_id" field.</summary>
    public const int BaseJobIdFieldNumber = 1;
    private string baseJobId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseJobId {
      get { return baseJobId_; }
      set {
        baseJobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sub_job_index" field.</summary>
    public const int SubJobIndexFieldNumber = 2;
    private int subJobIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubJobIndex {
      get { return subJobIndex_; }
      set {
        subJobIndex_ = value;
      }
    }

    /// <summary>Field number for the "hp_stat_mod" field.</summary>
    public const int HpStatModFieldNumber = 3;
    private int hpStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpStatMod {
      get { return hpStatMod_; }
      set {
        hpStatMod_ = value;
      }
    }

    /// <summary>Field number for the "attack_stat_mod" field.</summary>
    public const int AttackStatModFieldNumber = 4;
    private int attackStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackStatMod {
      get { return attackStatMod_; }
      set {
        attackStatMod_ = value;
      }
    }

    /// <summary>Field number for the "break_stat_mod" field.</summary>
    public const int BreakStatModFieldNumber = 5;
    private int breakStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakStatMod {
      get { return breakStatMod_; }
      set {
        breakStatMod_ = value;
      }
    }

    /// <summary>Field number for the "magic_stat_mod" field.</summary>
    public const int MagicStatModFieldNumber = 6;
    private int magicStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicStatMod {
      get { return magicStatMod_; }
      set {
        magicStatMod_ = value;
      }
    }

    /// <summary>Field number for the "speed_stat_mod" field.</summary>
    public const int SpeedStatModFieldNumber = 7;
    private int speedStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedStatMod {
      get { return speedStatMod_; }
      set {
        speedStatMod_ = value;
      }
    }

    /// <summary>Field number for the "defense_stat_mod" field.</summary>
    public const int DefenseStatModFieldNumber = 8;
    private int defenseStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenseStatMod {
      get { return defenseStatMod_; }
      set {
        defenseStatMod_ = value;
      }
    }

    /// <summary>Field number for the "crit_chance_stat_mod" field.</summary>
    public const int CritChanceStatModFieldNumber = 9;
    private int critChanceStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CritChanceStatMod {
      get { return critChanceStatMod_; }
      set {
        critChanceStatMod_ = value;
      }
    }

    /// <summary>Field number for the "ultimate_boost" field.</summary>
    public const int UltimateBoostFieldNumber = 10;
    private int ultimateBoost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UltimateBoost {
      get { return ultimateBoost_; }
      set {
        ultimateBoost_ = value;
      }
    }

    /// <summary>Field number for the "over_boost_level" field.</summary>
    public const int OverBoostLevelFieldNumber = 11;
    private int overBoostLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverBoostLevel {
      get { return overBoostLevel_; }
      set {
        overBoostLevel_ = value;
      }
    }

    /// <summary>Field number for the "auto_abilities" field.</summary>
    public const int AutoAbilitiesFieldNumber = 12;
    private static readonly pbc::MapField<string, int>.Codec _map_autoAbilities_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt32(16, 0), 98);
    private readonly pbc::MapField<string, int> autoAbilities_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> AutoAbilities {
      get { return autoAbilities_; }
    }

    /// <summary>Field number for the "crown_level" field.</summary>
    public const int CrownLevelFieldNumber = 13;
    private int crownLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrownLevel {
      get { return crownLevel_; }
      set {
        crownLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoJobCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoJobCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseJobId != other.BaseJobId) return false;
      if (SubJobIndex != other.SubJobIndex) return false;
      if (HpStatMod != other.HpStatMod) return false;
      if (AttackStatMod != other.AttackStatMod) return false;
      if (BreakStatMod != other.BreakStatMod) return false;
      if (MagicStatMod != other.MagicStatMod) return false;
      if (SpeedStatMod != other.SpeedStatMod) return false;
      if (DefenseStatMod != other.DefenseStatMod) return false;
      if (CritChanceStatMod != other.CritChanceStatMod) return false;
      if (UltimateBoost != other.UltimateBoost) return false;
      if (OverBoostLevel != other.OverBoostLevel) return false;
      if (!AutoAbilities.Equals(other.AutoAbilities)) return false;
      if (CrownLevel != other.CrownLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseJobId.Length != 0) hash ^= BaseJobId.GetHashCode();
      if (SubJobIndex != 0) hash ^= SubJobIndex.GetHashCode();
      if (HpStatMod != 0) hash ^= HpStatMod.GetHashCode();
      if (AttackStatMod != 0) hash ^= AttackStatMod.GetHashCode();
      if (BreakStatMod != 0) hash ^= BreakStatMod.GetHashCode();
      if (MagicStatMod != 0) hash ^= MagicStatMod.GetHashCode();
      if (SpeedStatMod != 0) hash ^= SpeedStatMod.GetHashCode();
      if (DefenseStatMod != 0) hash ^= DefenseStatMod.GetHashCode();
      if (CritChanceStatMod != 0) hash ^= CritChanceStatMod.GetHashCode();
      if (UltimateBoost != 0) hash ^= UltimateBoost.GetHashCode();
      if (OverBoostLevel != 0) hash ^= OverBoostLevel.GetHashCode();
      hash ^= AutoAbilities.GetHashCode();
      if (CrownLevel != 0) hash ^= CrownLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BaseJobId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseJobId);
      }
      if (SubJobIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SubJobIndex);
      }
      if (HpStatMod != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HpStatMod);
      }
      if (AttackStatMod != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttackStatMod);
      }
      if (BreakStatMod != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BreakStatMod);
      }
      if (MagicStatMod != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MagicStatMod);
      }
      if (SpeedStatMod != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SpeedStatMod);
      }
      if (DefenseStatMod != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DefenseStatMod);
      }
      if (CritChanceStatMod != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CritChanceStatMod);
      }
      if (UltimateBoost != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UltimateBoost);
      }
      if (OverBoostLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OverBoostLevel);
      }
      autoAbilities_.WriteTo(output, _map_autoAbilities_codec);
      if (CrownLevel != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CrownLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BaseJobId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseJobId);
      }
      if (SubJobIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SubJobIndex);
      }
      if (HpStatMod != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HpStatMod);
      }
      if (AttackStatMod != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttackStatMod);
      }
      if (BreakStatMod != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BreakStatMod);
      }
      if (MagicStatMod != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MagicStatMod);
      }
      if (SpeedStatMod != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SpeedStatMod);
      }
      if (DefenseStatMod != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DefenseStatMod);
      }
      if (CritChanceStatMod != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CritChanceStatMod);
      }
      if (UltimateBoost != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UltimateBoost);
      }
      if (OverBoostLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OverBoostLevel);
      }
      autoAbilities_.WriteTo(ref output, _map_autoAbilities_codec);
      if (CrownLevel != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CrownLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseJobId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseJobId);
      }
      if (SubJobIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubJobIndex);
      }
      if (HpStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpStatMod);
      }
      if (AttackStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackStatMod);
      }
      if (BreakStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakStatMod);
      }
      if (MagicStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicStatMod);
      }
      if (SpeedStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedStatMod);
      }
      if (DefenseStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefenseStatMod);
      }
      if (CritChanceStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CritChanceStatMod);
      }
      if (UltimateBoost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UltimateBoost);
      }
      if (OverBoostLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverBoostLevel);
      }
      size += autoAbilities_.CalculateSize(_map_autoAbilities_codec);
      if (CrownLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrownLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoJobCard other) {
      if (other == null) {
        return;
      }
      if (other.BaseJobId.Length != 0) {
        BaseJobId = other.BaseJobId;
      }
      if (other.SubJobIndex != 0) {
        SubJobIndex = other.SubJobIndex;
      }
      if (other.HpStatMod != 0) {
        HpStatMod = other.HpStatMod;
      }
      if (other.AttackStatMod != 0) {
        AttackStatMod = other.AttackStatMod;
      }
      if (other.BreakStatMod != 0) {
        BreakStatMod = other.BreakStatMod;
      }
      if (other.MagicStatMod != 0) {
        MagicStatMod = other.MagicStatMod;
      }
      if (other.SpeedStatMod != 0) {
        SpeedStatMod = other.SpeedStatMod;
      }
      if (other.DefenseStatMod != 0) {
        DefenseStatMod = other.DefenseStatMod;
      }
      if (other.CritChanceStatMod != 0) {
        CritChanceStatMod = other.CritChanceStatMod;
      }
      if (other.UltimateBoost != 0) {
        UltimateBoost = other.UltimateBoost;
      }
      if (other.OverBoostLevel != 0) {
        OverBoostLevel = other.OverBoostLevel;
      }
      autoAbilities_.Add(other.autoAbilities_);
      if (other.CrownLevel != 0) {
        CrownLevel = other.CrownLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BaseJobId = input.ReadString();
            break;
          }
          case 16: {
            SubJobIndex = input.ReadInt32();
            break;
          }
          case 24: {
            HpStatMod = input.ReadInt32();
            break;
          }
          case 32: {
            AttackStatMod = input.ReadInt32();
            break;
          }
          case 40: {
            BreakStatMod = input.ReadInt32();
            break;
          }
          case 48: {
            MagicStatMod = input.ReadInt32();
            break;
          }
          case 56: {
            SpeedStatMod = input.ReadInt32();
            break;
          }
          case 64: {
            DefenseStatMod = input.ReadInt32();
            break;
          }
          case 72: {
            CritChanceStatMod = input.ReadInt32();
            break;
          }
          case 80: {
            UltimateBoost = input.ReadInt32();
            break;
          }
          case 88: {
            OverBoostLevel = input.ReadInt32();
            break;
          }
          case 98: {
            autoAbilities_.AddEntriesFrom(input, _map_autoAbilities_codec);
            break;
          }
          case 104: {
            CrownLevel = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BaseJobId = input.ReadString();
            break;
          }
          case 16: {
            SubJobIndex = input.ReadInt32();
            break;
          }
          case 24: {
            HpStatMod = input.ReadInt32();
            break;
          }
          case 32: {
            AttackStatMod = input.ReadInt32();
            break;
          }
          case 40: {
            BreakStatMod = input.ReadInt32();
            break;
          }
          case 48: {
            MagicStatMod = input.ReadInt32();
            break;
          }
          case 56: {
            SpeedStatMod = input.ReadInt32();
            break;
          }
          case 64: {
            DefenseStatMod = input.ReadInt32();
            break;
          }
          case 72: {
            CritChanceStatMod = input.ReadInt32();
            break;
          }
          case 80: {
            UltimateBoost = input.ReadInt32();
            break;
          }
          case 88: {
            OverBoostLevel = input.ReadInt32();
            break;
          }
          case 98: {
            autoAbilities_.AddEntriesFrom(ref input, _map_autoAbilities_codec);
            break;
          }
          case 104: {
            CrownLevel = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProtoWeapon : pb::IMessage<ProtoWeapon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtoWeapon> _parser = new pb::MessageParser<ProtoWeapon>(() => new ProtoWeapon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoWeapon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mobius.Proto.Identity.PlayerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoWeapon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoWeapon(ProtoWeapon other) : this() {
      baseWeaponId_ = other.baseWeaponId_;
      subWeaponUnlock_ = other.subWeaponUnlock_;
      hpStatMod_ = other.hpStatMod_;
      attackStatMod_ = other.attackStatMod_;
      breakStatMod_ = other.breakStatMod_;
      magicStatMod_ = other.magicStatMod_;
      speedStatMod_ = other.speedStatMod_;
      defenseStatMod_ = other.defenseStatMod_;
      critChanceStatMod_ = other.critChanceStatMod_;
      ultimateBoost_ = other.ultimateBoost_;
      autoAbilities_ = other.autoAbilities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoWeapon Clone() {
      return new ProtoWeapon(this);
    }

    /// <summary>Field number for the "base_weapon_id" field.</summary>
    public const int BaseWeaponIdFieldNumber = 1;
    private string baseWeaponId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseWeaponId {
      get { return baseWeaponId_; }
      set {
        baseWeaponId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sub_weapon_unlock" field.</summary>
    public const int SubWeaponUnlockFieldNumber = 2;
    private int subWeaponUnlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubWeaponUnlock {
      get { return subWeaponUnlock_; }
      set {
        subWeaponUnlock_ = value;
      }
    }

    /// <summary>Field number for the "hp_stat_mod" field.</summary>
    public const int HpStatModFieldNumber = 3;
    private int hpStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpStatMod {
      get { return hpStatMod_; }
      set {
        hpStatMod_ = value;
      }
    }

    /// <summary>Field number for the "attack_stat_mod" field.</summary>
    public const int AttackStatModFieldNumber = 4;
    private int attackStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackStatMod {
      get { return attackStatMod_; }
      set {
        attackStatMod_ = value;
      }
    }

    /// <summary>Field number for the "break_stat_mod" field.</summary>
    public const int BreakStatModFieldNumber = 5;
    private int breakStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakStatMod {
      get { return breakStatMod_; }
      set {
        breakStatMod_ = value;
      }
    }

    /// <summary>Field number for the "magic_stat_mod" field.</summary>
    public const int MagicStatModFieldNumber = 6;
    private int magicStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicStatMod {
      get { return magicStatMod_; }
      set {
        magicStatMod_ = value;
      }
    }

    /// <summary>Field number for the "speed_stat_mod" field.</summary>
    public const int SpeedStatModFieldNumber = 7;
    private int speedStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedStatMod {
      get { return speedStatMod_; }
      set {
        speedStatMod_ = value;
      }
    }

    /// <summary>Field number for the "defense_stat_mod" field.</summary>
    public const int DefenseStatModFieldNumber = 8;
    private int defenseStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenseStatMod {
      get { return defenseStatMod_; }
      set {
        defenseStatMod_ = value;
      }
    }

    /// <summary>Field number for the "crit_chance_stat_mod" field.</summary>
    public const int CritChanceStatModFieldNumber = 9;
    private int critChanceStatMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CritChanceStatMod {
      get { return critChanceStatMod_; }
      set {
        critChanceStatMod_ = value;
      }
    }

    /// <summary>Field number for the "ultimate_boost" field.</summary>
    public const int UltimateBoostFieldNumber = 10;
    private int ultimateBoost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UltimateBoost {
      get { return ultimateBoost_; }
      set {
        ultimateBoost_ = value;
      }
    }

    /// <summary>Field number for the "auto_abilities" field.</summary>
    public const int AutoAbilitiesFieldNumber = 11;
    private static readonly pbc::MapField<string, int>.Codec _map_autoAbilities_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt32(16, 0), 90);
    private readonly pbc::MapField<string, int> autoAbilities_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> AutoAbilities {
      get { return autoAbilities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoWeapon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoWeapon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseWeaponId != other.BaseWeaponId) return false;
      if (SubWeaponUnlock != other.SubWeaponUnlock) return false;
      if (HpStatMod != other.HpStatMod) return false;
      if (AttackStatMod != other.AttackStatMod) return false;
      if (BreakStatMod != other.BreakStatMod) return false;
      if (MagicStatMod != other.MagicStatMod) return false;
      if (SpeedStatMod != other.SpeedStatMod) return false;
      if (DefenseStatMod != other.DefenseStatMod) return false;
      if (CritChanceStatMod != other.CritChanceStatMod) return false;
      if (UltimateBoost != other.UltimateBoost) return false;
      if (!AutoAbilities.Equals(other.AutoAbilities)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseWeaponId.Length != 0) hash ^= BaseWeaponId.GetHashCode();
      if (SubWeaponUnlock != 0) hash ^= SubWeaponUnlock.GetHashCode();
      if (HpStatMod != 0) hash ^= HpStatMod.GetHashCode();
      if (AttackStatMod != 0) hash ^= AttackStatMod.GetHashCode();
      if (BreakStatMod != 0) hash ^= BreakStatMod.GetHashCode();
      if (MagicStatMod != 0) hash ^= MagicStatMod.GetHashCode();
      if (SpeedStatMod != 0) hash ^= SpeedStatMod.GetHashCode();
      if (DefenseStatMod != 0) hash ^= DefenseStatMod.GetHashCode();
      if (CritChanceStatMod != 0) hash ^= CritChanceStatMod.GetHashCode();
      if (UltimateBoost != 0) hash ^= UltimateBoost.GetHashCode();
      hash ^= AutoAbilities.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BaseWeaponId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseWeaponId);
      }
      if (SubWeaponUnlock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SubWeaponUnlock);
      }
      if (HpStatMod != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HpStatMod);
      }
      if (AttackStatMod != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttackStatMod);
      }
      if (BreakStatMod != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BreakStatMod);
      }
      if (MagicStatMod != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MagicStatMod);
      }
      if (SpeedStatMod != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SpeedStatMod);
      }
      if (DefenseStatMod != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DefenseStatMod);
      }
      if (CritChanceStatMod != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CritChanceStatMod);
      }
      if (UltimateBoost != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UltimateBoost);
      }
      autoAbilities_.WriteTo(output, _map_autoAbilities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BaseWeaponId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseWeaponId);
      }
      if (SubWeaponUnlock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SubWeaponUnlock);
      }
      if (HpStatMod != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HpStatMod);
      }
      if (AttackStatMod != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttackStatMod);
      }
      if (BreakStatMod != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BreakStatMod);
      }
      if (MagicStatMod != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MagicStatMod);
      }
      if (SpeedStatMod != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SpeedStatMod);
      }
      if (DefenseStatMod != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DefenseStatMod);
      }
      if (CritChanceStatMod != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CritChanceStatMod);
      }
      if (UltimateBoost != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UltimateBoost);
      }
      autoAbilities_.WriteTo(ref output, _map_autoAbilities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseWeaponId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseWeaponId);
      }
      if (SubWeaponUnlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubWeaponUnlock);
      }
      if (HpStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpStatMod);
      }
      if (AttackStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackStatMod);
      }
      if (BreakStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakStatMod);
      }
      if (MagicStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicStatMod);
      }
      if (SpeedStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedStatMod);
      }
      if (DefenseStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefenseStatMod);
      }
      if (CritChanceStatMod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CritChanceStatMod);
      }
      if (UltimateBoost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UltimateBoost);
      }
      size += autoAbilities_.CalculateSize(_map_autoAbilities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoWeapon other) {
      if (other == null) {
        return;
      }
      if (other.BaseWeaponId.Length != 0) {
        BaseWeaponId = other.BaseWeaponId;
      }
      if (other.SubWeaponUnlock != 0) {
        SubWeaponUnlock = other.SubWeaponUnlock;
      }
      if (other.HpStatMod != 0) {
        HpStatMod = other.HpStatMod;
      }
      if (other.AttackStatMod != 0) {
        AttackStatMod = other.AttackStatMod;
      }
      if (other.BreakStatMod != 0) {
        BreakStatMod = other.BreakStatMod;
      }
      if (other.MagicStatMod != 0) {
        MagicStatMod = other.MagicStatMod;
      }
      if (other.SpeedStatMod != 0) {
        SpeedStatMod = other.SpeedStatMod;
      }
      if (other.DefenseStatMod != 0) {
        DefenseStatMod = other.DefenseStatMod;
      }
      if (other.CritChanceStatMod != 0) {
        CritChanceStatMod = other.CritChanceStatMod;
      }
      if (other.UltimateBoost != 0) {
        UltimateBoost = other.UltimateBoost;
      }
      autoAbilities_.Add(other.autoAbilities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BaseWeaponId = input.ReadString();
            break;
          }
          case 16: {
            SubWeaponUnlock = input.ReadInt32();
            break;
          }
          case 24: {
            HpStatMod = input.ReadInt32();
            break;
          }
          case 32: {
            AttackStatMod = input.ReadInt32();
            break;
          }
          case 40: {
            BreakStatMod = input.ReadInt32();
            break;
          }
          case 48: {
            MagicStatMod = input.ReadInt32();
            break;
          }
          case 56: {
            SpeedStatMod = input.ReadInt32();
            break;
          }
          case 64: {
            DefenseStatMod = input.ReadInt32();
            break;
          }
          case 72: {
            CritChanceStatMod = input.ReadInt32();
            break;
          }
          case 80: {
            UltimateBoost = input.ReadInt32();
            break;
          }
          case 90: {
            autoAbilities_.AddEntriesFrom(input, _map_autoAbilities_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BaseWeaponId = input.ReadString();
            break;
          }
          case 16: {
            SubWeaponUnlock = input.ReadInt32();
            break;
          }
          case 24: {
            HpStatMod = input.ReadInt32();
            break;
          }
          case 32: {
            AttackStatMod = input.ReadInt32();
            break;
          }
          case 40: {
            BreakStatMod = input.ReadInt32();
            break;
          }
          case 48: {
            MagicStatMod = input.ReadInt32();
            break;
          }
          case 56: {
            SpeedStatMod = input.ReadInt32();
            break;
          }
          case 64: {
            DefenseStatMod = input.ReadInt32();
            break;
          }
          case 72: {
            CritChanceStatMod = input.ReadInt32();
            break;
          }
          case 80: {
            UltimateBoost = input.ReadInt32();
            break;
          }
          case 90: {
            autoAbilities_.AddEntriesFrom(ref input, _map_autoAbilities_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProtoAbilityCard : pb::IMessage<ProtoAbilityCard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtoAbilityCard> _parser = new pb::MessageParser<ProtoAbilityCard>(() => new ProtoAbilityCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoAbilityCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mobius.Proto.Identity.PlayerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoAbilityCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoAbilityCard(ProtoAbilityCard other) : this() {
      abilityCardId_ = other.abilityCardId_;
      abilityCardLevel_ = other.abilityCardLevel_;
      abilityLevel_ = other.abilityLevel_;
      extraSkillUnlock_ = other.extraSkillUnlock_;
      overBoostLevel_ = other.overBoostLevel_;
      autoAbilities_ = other.autoAbilities_.Clone();
      slotIndex_ = other.slotIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoAbilityCard Clone() {
      return new ProtoAbilityCard(this);
    }

    /// <summary>Field number for the "ability_card_id" field.</summary>
    public const int AbilityCardIdFieldNumber = 1;
    private string abilityCardId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AbilityCardId {
      get { return abilityCardId_; }
      set {
        abilityCardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ability_card_level" field.</summary>
    public const int AbilityCardLevelFieldNumber = 2;
    private int abilityCardLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityCardLevel {
      get { return abilityCardLevel_; }
      set {
        abilityCardLevel_ = value;
      }
    }

    /// <summary>Field number for the "ability_level" field.</summary>
    public const int AbilityLevelFieldNumber = 3;
    private int abilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityLevel {
      get { return abilityLevel_; }
      set {
        abilityLevel_ = value;
      }
    }

    /// <summary>Field number for the "extra_skill_unlock" field.</summary>
    public const int ExtraSkillUnlockFieldNumber = 4;
    private int extraSkillUnlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraSkillUnlock {
      get { return extraSkillUnlock_; }
      set {
        extraSkillUnlock_ = value;
      }
    }

    /// <summary>Field number for the "over_boost_level" field.</summary>
    public const int OverBoostLevelFieldNumber = 5;
    private int overBoostLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverBoostLevel {
      get { return overBoostLevel_; }
      set {
        overBoostLevel_ = value;
      }
    }

    /// <summary>Field number for the "auto_abilities" field.</summary>
    public const int AutoAbilitiesFieldNumber = 6;
    private static readonly pbc::MapField<string, int>.Codec _map_autoAbilities_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt32(16, 0), 50);
    private readonly pbc::MapField<string, int> autoAbilities_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> AutoAbilities {
      get { return autoAbilities_; }
    }

    /// <summary>Field number for the "slot_index" field.</summary>
    public const int SlotIndexFieldNumber = 20;
    private int slotIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotIndex {
      get { return slotIndex_; }
      set {
        slotIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoAbilityCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoAbilityCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityCardId != other.AbilityCardId) return false;
      if (AbilityCardLevel != other.AbilityCardLevel) return false;
      if (AbilityLevel != other.AbilityLevel) return false;
      if (ExtraSkillUnlock != other.ExtraSkillUnlock) return false;
      if (OverBoostLevel != other.OverBoostLevel) return false;
      if (!AutoAbilities.Equals(other.AutoAbilities)) return false;
      if (SlotIndex != other.SlotIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityCardId.Length != 0) hash ^= AbilityCardId.GetHashCode();
      if (AbilityCardLevel != 0) hash ^= AbilityCardLevel.GetHashCode();
      if (AbilityLevel != 0) hash ^= AbilityLevel.GetHashCode();
      if (ExtraSkillUnlock != 0) hash ^= ExtraSkillUnlock.GetHashCode();
      if (OverBoostLevel != 0) hash ^= OverBoostLevel.GetHashCode();
      hash ^= AutoAbilities.GetHashCode();
      if (SlotIndex != 0) hash ^= SlotIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AbilityCardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AbilityCardId);
      }
      if (AbilityCardLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AbilityCardLevel);
      }
      if (AbilityLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AbilityLevel);
      }
      if (ExtraSkillUnlock != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ExtraSkillUnlock);
      }
      if (OverBoostLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OverBoostLevel);
      }
      autoAbilities_.WriteTo(output, _map_autoAbilities_codec);
      if (SlotIndex != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SlotIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AbilityCardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AbilityCardId);
      }
      if (AbilityCardLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AbilityCardLevel);
      }
      if (AbilityLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AbilityLevel);
      }
      if (ExtraSkillUnlock != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ExtraSkillUnlock);
      }
      if (OverBoostLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OverBoostLevel);
      }
      autoAbilities_.WriteTo(ref output, _map_autoAbilities_codec);
      if (SlotIndex != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SlotIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityCardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AbilityCardId);
      }
      if (AbilityCardLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityCardLevel);
      }
      if (AbilityLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityLevel);
      }
      if (ExtraSkillUnlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraSkillUnlock);
      }
      if (OverBoostLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverBoostLevel);
      }
      size += autoAbilities_.CalculateSize(_map_autoAbilities_codec);
      if (SlotIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SlotIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoAbilityCard other) {
      if (other == null) {
        return;
      }
      if (other.AbilityCardId.Length != 0) {
        AbilityCardId = other.AbilityCardId;
      }
      if (other.AbilityCardLevel != 0) {
        AbilityCardLevel = other.AbilityCardLevel;
      }
      if (other.AbilityLevel != 0) {
        AbilityLevel = other.AbilityLevel;
      }
      if (other.ExtraSkillUnlock != 0) {
        ExtraSkillUnlock = other.ExtraSkillUnlock;
      }
      if (other.OverBoostLevel != 0) {
        OverBoostLevel = other.OverBoostLevel;
      }
      autoAbilities_.Add(other.autoAbilities_);
      if (other.SlotIndex != 0) {
        SlotIndex = other.SlotIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AbilityCardId = input.ReadString();
            break;
          }
          case 16: {
            AbilityCardLevel = input.ReadInt32();
            break;
          }
          case 24: {
            AbilityLevel = input.ReadInt32();
            break;
          }
          case 32: {
            ExtraSkillUnlock = input.ReadInt32();
            break;
          }
          case 40: {
            OverBoostLevel = input.ReadInt32();
            break;
          }
          case 50: {
            autoAbilities_.AddEntriesFrom(input, _map_autoAbilities_codec);
            break;
          }
          case 160: {
            SlotIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AbilityCardId = input.ReadString();
            break;
          }
          case 16: {
            AbilityCardLevel = input.ReadInt32();
            break;
          }
          case 24: {
            AbilityLevel = input.ReadInt32();
            break;
          }
          case 32: {
            ExtraSkillUnlock = input.ReadInt32();
            break;
          }
          case 40: {
            OverBoostLevel = input.ReadInt32();
            break;
          }
          case 50: {
            autoAbilities_.AddEntriesFrom(ref input, _map_autoAbilities_codec);
            break;
          }
          case 160: {
            SlotIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
