// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: web.service.proto

package services

import (
	context "context"
	protoc "github.com/justjack1521/mevium/pkg/genproto/protoc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreWebServiceClient is the client API for CoreWebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreWebServiceClient interface {
	CreateProfile(ctx context.Context, in *protoc.CreateProfileRequest, opts ...grpc.CallOption) (*protoc.CreateProfileResponse, error)
	FavouriteCard(ctx context.Context, in *protoc.CardFavouriteRequest, opts ...grpc.CallOption) (*protoc.CardFavouriteResponse, error)
	CardSale(ctx context.Context, in *protoc.CardSaleRequest, opts ...grpc.CallOption) (*protoc.CardSaleResponse, error)
	ConfirmDailyMission(ctx context.Context, in *protoc.ConfirmDailyMissionRequest, opts ...grpc.CallOption) (*protoc.ConfirmDailyMissionResponse, error)
	RestoreStamina(ctx context.Context, in *protoc.StaminaRestoreRequest, opts ...grpc.CallOption) (*protoc.StaminaRestoreResponse, error)
}

type coreWebServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreWebServiceClient(cc grpc.ClientConnInterface) CoreWebServiceClient {
	return &coreWebServiceClient{cc}
}

func (c *coreWebServiceClient) CreateProfile(ctx context.Context, in *protoc.CreateProfileRequest, opts ...grpc.CallOption) (*protoc.CreateProfileResponse, error) {
	out := new(protoc.CreateProfileResponse)
	err := c.cc.Invoke(ctx, "/core.CoreWebService/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreWebServiceClient) FavouriteCard(ctx context.Context, in *protoc.CardFavouriteRequest, opts ...grpc.CallOption) (*protoc.CardFavouriteResponse, error) {
	out := new(protoc.CardFavouriteResponse)
	err := c.cc.Invoke(ctx, "/core.CoreWebService/FavouriteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreWebServiceClient) CardSale(ctx context.Context, in *protoc.CardSaleRequest, opts ...grpc.CallOption) (*protoc.CardSaleResponse, error) {
	out := new(protoc.CardSaleResponse)
	err := c.cc.Invoke(ctx, "/core.CoreWebService/CardSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreWebServiceClient) ConfirmDailyMission(ctx context.Context, in *protoc.ConfirmDailyMissionRequest, opts ...grpc.CallOption) (*protoc.ConfirmDailyMissionResponse, error) {
	out := new(protoc.ConfirmDailyMissionResponse)
	err := c.cc.Invoke(ctx, "/core.CoreWebService/ConfirmDailyMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreWebServiceClient) RestoreStamina(ctx context.Context, in *protoc.StaminaRestoreRequest, opts ...grpc.CallOption) (*protoc.StaminaRestoreResponse, error) {
	out := new(protoc.StaminaRestoreResponse)
	err := c.cc.Invoke(ctx, "/core.CoreWebService/RestoreStamina", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreWebServiceServer is the server API for CoreWebService service.
// All implementations should embed UnimplementedCoreWebServiceServer
// for forward compatibility
type CoreWebServiceServer interface {
	CreateProfile(context.Context, *protoc.CreateProfileRequest) (*protoc.CreateProfileResponse, error)
	FavouriteCard(context.Context, *protoc.CardFavouriteRequest) (*protoc.CardFavouriteResponse, error)
	CardSale(context.Context, *protoc.CardSaleRequest) (*protoc.CardSaleResponse, error)
	ConfirmDailyMission(context.Context, *protoc.ConfirmDailyMissionRequest) (*protoc.ConfirmDailyMissionResponse, error)
	RestoreStamina(context.Context, *protoc.StaminaRestoreRequest) (*protoc.StaminaRestoreResponse, error)
}

// UnimplementedCoreWebServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCoreWebServiceServer struct {
}

func (UnimplementedCoreWebServiceServer) CreateProfile(context.Context, *protoc.CreateProfileRequest) (*protoc.CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedCoreWebServiceServer) FavouriteCard(context.Context, *protoc.CardFavouriteRequest) (*protoc.CardFavouriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavouriteCard not implemented")
}
func (UnimplementedCoreWebServiceServer) CardSale(context.Context, *protoc.CardSaleRequest) (*protoc.CardSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardSale not implemented")
}
func (UnimplementedCoreWebServiceServer) ConfirmDailyMission(context.Context, *protoc.ConfirmDailyMissionRequest) (*protoc.ConfirmDailyMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDailyMission not implemented")
}
func (UnimplementedCoreWebServiceServer) RestoreStamina(context.Context, *protoc.StaminaRestoreRequest) (*protoc.StaminaRestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreStamina not implemented")
}

// UnsafeCoreWebServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreWebServiceServer will
// result in compilation errors.
type UnsafeCoreWebServiceServer interface {
	mustEmbedUnimplementedCoreWebServiceServer()
}

func RegisterCoreWebServiceServer(s grpc.ServiceRegistrar, srv CoreWebServiceServer) {
	s.RegisterService(&CoreWebService_ServiceDesc, srv)
}

func _CoreWebService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreWebServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.CoreWebService/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreWebServiceServer).CreateProfile(ctx, req.(*protoc.CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreWebService_FavouriteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.CardFavouriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreWebServiceServer).FavouriteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.CoreWebService/FavouriteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreWebServiceServer).FavouriteCard(ctx, req.(*protoc.CardFavouriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreWebService_CardSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.CardSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreWebServiceServer).CardSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.CoreWebService/CardSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreWebServiceServer).CardSale(ctx, req.(*protoc.CardSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreWebService_ConfirmDailyMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.ConfirmDailyMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreWebServiceServer).ConfirmDailyMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.CoreWebService/ConfirmDailyMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreWebServiceServer).ConfirmDailyMission(ctx, req.(*protoc.ConfirmDailyMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreWebService_RestoreStamina_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.StaminaRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreWebServiceServer).RestoreStamina(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.CoreWebService/RestoreStamina",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreWebServiceServer).RestoreStamina(ctx, req.(*protoc.StaminaRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreWebService_ServiceDesc is the grpc.ServiceDesc for CoreWebService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreWebService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.CoreWebService",
	HandlerType: (*CoreWebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfile",
			Handler:    _CoreWebService_CreateProfile_Handler,
		},
		{
			MethodName: "FavouriteCard",
			Handler:    _CoreWebService_FavouriteCard_Handler,
		},
		{
			MethodName: "CardSale",
			Handler:    _CoreWebService_CardSale_Handler,
		},
		{
			MethodName: "ConfirmDailyMission",
			Handler:    _CoreWebService_ConfirmDailyMission_Handler,
		},
		{
			MethodName: "RestoreStamina",
			Handler:    _CoreWebService_RestoreStamina_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web.service.proto",
}
