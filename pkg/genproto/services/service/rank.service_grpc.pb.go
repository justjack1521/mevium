// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: service/rank.service.proto

package services

import (
	context "context"
	protochallenge "github.com/justjack1521/mevium/pkg/genproto/protochallenge"
	protorank "github.com/justjack1521/mevium/pkg/genproto/protorank"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MeviusRankService_SubmitScore_FullMethodName              = "/service.MeviusRankService/SubmitScore"
	MeviusRankService_GetPlayerEventRewards_FullMethodName    = "/service.MeviusRankService/GetPlayerEventRewards"
	MeviusRankService_FetchPlayerRankingInfo_FullMethodName   = "/service.MeviusRankService/FetchPlayerRankingInfo"
	MeviusRankService_RefreshWeeklyRankRange_FullMethodName   = "/service.MeviusRankService/RefreshWeeklyRankRange"
	MeviusRankService_RefreshSpecialRankRange_FullMethodName  = "/service.MeviusRankService/RefreshSpecialRankRange"
	MeviusRankService_GetActivePlayerChallenge_FullMethodName = "/service.MeviusRankService/GetActivePlayerChallenge"
	MeviusRankService_GetPlayerChallenge_FullMethodName       = "/service.MeviusRankService/GetPlayerChallenge"
	MeviusRankService_JoinSocialChallenge_FullMethodName      = "/service.MeviusRankService/JoinSocialChallenge"
)

// MeviusRankServiceClient is the client API for MeviusRankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeviusRankServiceClient interface {
	SubmitScore(ctx context.Context, in *protorank.SubmitScoreRequest, opts ...grpc.CallOption) (*protorank.SubmitScoreResponse, error)
	GetPlayerEventRewards(ctx context.Context, in *protorank.GetPlayerEventRewardsRequest, opts ...grpc.CallOption) (*protorank.GetPlayerEventRewardsResponse, error)
	FetchPlayerRankingInfo(ctx context.Context, in *protorank.FetchPlayerRankingInfoRequest, opts ...grpc.CallOption) (*protorank.FetchPlayerRankingInfoResponse, error)
	RefreshWeeklyRankRange(ctx context.Context, in *protorank.RefreshWeeklyRankRangeRequest, opts ...grpc.CallOption) (*protorank.RefreshWeeklyRankRangeResponse, error)
	RefreshSpecialRankRange(ctx context.Context, in *protorank.RefreshSpecialRankRangeRequest, opts ...grpc.CallOption) (*protorank.RefreshSpecialRankRangeResponse, error)
	GetActivePlayerChallenge(ctx context.Context, in *protochallenge.GetActivePlayerChallengeRequest, opts ...grpc.CallOption) (*protochallenge.GetActivePlayerChallengeResponse, error)
	GetPlayerChallenge(ctx context.Context, in *protochallenge.GetPlayerChallengeRequest, opts ...grpc.CallOption) (*protochallenge.GetPlayerChallengeResponse, error)
	JoinSocialChallenge(ctx context.Context, in *protochallenge.JoinSocialChallengeRequest, opts ...grpc.CallOption) (*protochallenge.JoinSocialChallengeResponse, error)
}

type meviusRankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeviusRankServiceClient(cc grpc.ClientConnInterface) MeviusRankServiceClient {
	return &meviusRankServiceClient{cc}
}

func (c *meviusRankServiceClient) SubmitScore(ctx context.Context, in *protorank.SubmitScoreRequest, opts ...grpc.CallOption) (*protorank.SubmitScoreResponse, error) {
	out := new(protorank.SubmitScoreResponse)
	err := c.cc.Invoke(ctx, MeviusRankService_SubmitScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusRankServiceClient) GetPlayerEventRewards(ctx context.Context, in *protorank.GetPlayerEventRewardsRequest, opts ...grpc.CallOption) (*protorank.GetPlayerEventRewardsResponse, error) {
	out := new(protorank.GetPlayerEventRewardsResponse)
	err := c.cc.Invoke(ctx, MeviusRankService_GetPlayerEventRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusRankServiceClient) FetchPlayerRankingInfo(ctx context.Context, in *protorank.FetchPlayerRankingInfoRequest, opts ...grpc.CallOption) (*protorank.FetchPlayerRankingInfoResponse, error) {
	out := new(protorank.FetchPlayerRankingInfoResponse)
	err := c.cc.Invoke(ctx, MeviusRankService_FetchPlayerRankingInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusRankServiceClient) RefreshWeeklyRankRange(ctx context.Context, in *protorank.RefreshWeeklyRankRangeRequest, opts ...grpc.CallOption) (*protorank.RefreshWeeklyRankRangeResponse, error) {
	out := new(protorank.RefreshWeeklyRankRangeResponse)
	err := c.cc.Invoke(ctx, MeviusRankService_RefreshWeeklyRankRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusRankServiceClient) RefreshSpecialRankRange(ctx context.Context, in *protorank.RefreshSpecialRankRangeRequest, opts ...grpc.CallOption) (*protorank.RefreshSpecialRankRangeResponse, error) {
	out := new(protorank.RefreshSpecialRankRangeResponse)
	err := c.cc.Invoke(ctx, MeviusRankService_RefreshSpecialRankRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusRankServiceClient) GetActivePlayerChallenge(ctx context.Context, in *protochallenge.GetActivePlayerChallengeRequest, opts ...grpc.CallOption) (*protochallenge.GetActivePlayerChallengeResponse, error) {
	out := new(protochallenge.GetActivePlayerChallengeResponse)
	err := c.cc.Invoke(ctx, MeviusRankService_GetActivePlayerChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusRankServiceClient) GetPlayerChallenge(ctx context.Context, in *protochallenge.GetPlayerChallengeRequest, opts ...grpc.CallOption) (*protochallenge.GetPlayerChallengeResponse, error) {
	out := new(protochallenge.GetPlayerChallengeResponse)
	err := c.cc.Invoke(ctx, MeviusRankService_GetPlayerChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusRankServiceClient) JoinSocialChallenge(ctx context.Context, in *protochallenge.JoinSocialChallengeRequest, opts ...grpc.CallOption) (*protochallenge.JoinSocialChallengeResponse, error) {
	out := new(protochallenge.JoinSocialChallengeResponse)
	err := c.cc.Invoke(ctx, MeviusRankService_JoinSocialChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeviusRankServiceServer is the server API for MeviusRankService service.
// All implementations should embed UnimplementedMeviusRankServiceServer
// for forward compatibility
type MeviusRankServiceServer interface {
	SubmitScore(context.Context, *protorank.SubmitScoreRequest) (*protorank.SubmitScoreResponse, error)
	GetPlayerEventRewards(context.Context, *protorank.GetPlayerEventRewardsRequest) (*protorank.GetPlayerEventRewardsResponse, error)
	FetchPlayerRankingInfo(context.Context, *protorank.FetchPlayerRankingInfoRequest) (*protorank.FetchPlayerRankingInfoResponse, error)
	RefreshWeeklyRankRange(context.Context, *protorank.RefreshWeeklyRankRangeRequest) (*protorank.RefreshWeeklyRankRangeResponse, error)
	RefreshSpecialRankRange(context.Context, *protorank.RefreshSpecialRankRangeRequest) (*protorank.RefreshSpecialRankRangeResponse, error)
	GetActivePlayerChallenge(context.Context, *protochallenge.GetActivePlayerChallengeRequest) (*protochallenge.GetActivePlayerChallengeResponse, error)
	GetPlayerChallenge(context.Context, *protochallenge.GetPlayerChallengeRequest) (*protochallenge.GetPlayerChallengeResponse, error)
	JoinSocialChallenge(context.Context, *protochallenge.JoinSocialChallengeRequest) (*protochallenge.JoinSocialChallengeResponse, error)
}

// UnimplementedMeviusRankServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMeviusRankServiceServer struct {
}

func (UnimplementedMeviusRankServiceServer) SubmitScore(context.Context, *protorank.SubmitScoreRequest) (*protorank.SubmitScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitScore not implemented")
}
func (UnimplementedMeviusRankServiceServer) GetPlayerEventRewards(context.Context, *protorank.GetPlayerEventRewardsRequest) (*protorank.GetPlayerEventRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerEventRewards not implemented")
}
func (UnimplementedMeviusRankServiceServer) FetchPlayerRankingInfo(context.Context, *protorank.FetchPlayerRankingInfoRequest) (*protorank.FetchPlayerRankingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPlayerRankingInfo not implemented")
}
func (UnimplementedMeviusRankServiceServer) RefreshWeeklyRankRange(context.Context, *protorank.RefreshWeeklyRankRangeRequest) (*protorank.RefreshWeeklyRankRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshWeeklyRankRange not implemented")
}
func (UnimplementedMeviusRankServiceServer) RefreshSpecialRankRange(context.Context, *protorank.RefreshSpecialRankRangeRequest) (*protorank.RefreshSpecialRankRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshSpecialRankRange not implemented")
}
func (UnimplementedMeviusRankServiceServer) GetActivePlayerChallenge(context.Context, *protochallenge.GetActivePlayerChallengeRequest) (*protochallenge.GetActivePlayerChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePlayerChallenge not implemented")
}
func (UnimplementedMeviusRankServiceServer) GetPlayerChallenge(context.Context, *protochallenge.GetPlayerChallengeRequest) (*protochallenge.GetPlayerChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerChallenge not implemented")
}
func (UnimplementedMeviusRankServiceServer) JoinSocialChallenge(context.Context, *protochallenge.JoinSocialChallengeRequest) (*protochallenge.JoinSocialChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinSocialChallenge not implemented")
}

// UnsafeMeviusRankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeviusRankServiceServer will
// result in compilation errors.
type UnsafeMeviusRankServiceServer interface {
	mustEmbedUnimplementedMeviusRankServiceServer()
}

func RegisterMeviusRankServiceServer(s grpc.ServiceRegistrar, srv MeviusRankServiceServer) {
	s.RegisterService(&MeviusRankService_ServiceDesc, srv)
}

func _MeviusRankService_SubmitScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protorank.SubmitScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusRankServiceServer).SubmitScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusRankService_SubmitScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusRankServiceServer).SubmitScore(ctx, req.(*protorank.SubmitScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusRankService_GetPlayerEventRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protorank.GetPlayerEventRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusRankServiceServer).GetPlayerEventRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusRankService_GetPlayerEventRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusRankServiceServer).GetPlayerEventRewards(ctx, req.(*protorank.GetPlayerEventRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusRankService_FetchPlayerRankingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protorank.FetchPlayerRankingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusRankServiceServer).FetchPlayerRankingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusRankService_FetchPlayerRankingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusRankServiceServer).FetchPlayerRankingInfo(ctx, req.(*protorank.FetchPlayerRankingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusRankService_RefreshWeeklyRankRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protorank.RefreshWeeklyRankRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusRankServiceServer).RefreshWeeklyRankRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusRankService_RefreshWeeklyRankRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusRankServiceServer).RefreshWeeklyRankRange(ctx, req.(*protorank.RefreshWeeklyRankRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusRankService_RefreshSpecialRankRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protorank.RefreshSpecialRankRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusRankServiceServer).RefreshSpecialRankRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusRankService_RefreshSpecialRankRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusRankServiceServer).RefreshSpecialRankRange(ctx, req.(*protorank.RefreshSpecialRankRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusRankService_GetActivePlayerChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protochallenge.GetActivePlayerChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusRankServiceServer).GetActivePlayerChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusRankService_GetActivePlayerChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusRankServiceServer).GetActivePlayerChallenge(ctx, req.(*protochallenge.GetActivePlayerChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusRankService_GetPlayerChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protochallenge.GetPlayerChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusRankServiceServer).GetPlayerChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusRankService_GetPlayerChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusRankServiceServer).GetPlayerChallenge(ctx, req.(*protochallenge.GetPlayerChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusRankService_JoinSocialChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protochallenge.JoinSocialChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusRankServiceServer).JoinSocialChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusRankService_JoinSocialChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusRankServiceServer).JoinSocialChallenge(ctx, req.(*protochallenge.JoinSocialChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeviusRankService_ServiceDesc is the grpc.ServiceDesc for MeviusRankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeviusRankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.MeviusRankService",
	HandlerType: (*MeviusRankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitScore",
			Handler:    _MeviusRankService_SubmitScore_Handler,
		},
		{
			MethodName: "GetPlayerEventRewards",
			Handler:    _MeviusRankService_GetPlayerEventRewards_Handler,
		},
		{
			MethodName: "FetchPlayerRankingInfo",
			Handler:    _MeviusRankService_FetchPlayerRankingInfo_Handler,
		},
		{
			MethodName: "RefreshWeeklyRankRange",
			Handler:    _MeviusRankService_RefreshWeeklyRankRange_Handler,
		},
		{
			MethodName: "RefreshSpecialRankRange",
			Handler:    _MeviusRankService_RefreshSpecialRankRange_Handler,
		},
		{
			MethodName: "GetActivePlayerChallenge",
			Handler:    _MeviusRankService_GetActivePlayerChallenge_Handler,
		},
		{
			MethodName: "GetPlayerChallenge",
			Handler:    _MeviusRankService_GetPlayerChallenge_Handler,
		},
		{
			MethodName: "JoinSocialChallenge",
			Handler:    _MeviusRankService_JoinSocialChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/rank.service.proto",
}
