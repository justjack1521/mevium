// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: service/challenge.service.proto

package services

import (
	context "context"
	protochallenge "github.com/justjack1521/mevium/pkg/genproto/protochallenge"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MeviusChallengeService_GetActivePlayerChallenge_FullMethodName = "/service.MeviusChallengeService/GetActivePlayerChallenge"
)

// MeviusChallengeServiceClient is the client API for MeviusChallengeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeviusChallengeServiceClient interface {
	GetActivePlayerChallenge(ctx context.Context, in *protochallenge.GetActivePlayerChallengeRequest, opts ...grpc.CallOption) (*protochallenge.GetActivePlayerChallengeResponse, error)
}

type meviusChallengeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeviusChallengeServiceClient(cc grpc.ClientConnInterface) MeviusChallengeServiceClient {
	return &meviusChallengeServiceClient{cc}
}

func (c *meviusChallengeServiceClient) GetActivePlayerChallenge(ctx context.Context, in *protochallenge.GetActivePlayerChallengeRequest, opts ...grpc.CallOption) (*protochallenge.GetActivePlayerChallengeResponse, error) {
	out := new(protochallenge.GetActivePlayerChallengeResponse)
	err := c.cc.Invoke(ctx, MeviusChallengeService_GetActivePlayerChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeviusChallengeServiceServer is the server API for MeviusChallengeService service.
// All implementations should embed UnimplementedMeviusChallengeServiceServer
// for forward compatibility
type MeviusChallengeServiceServer interface {
	GetActivePlayerChallenge(context.Context, *protochallenge.GetActivePlayerChallengeRequest) (*protochallenge.GetActivePlayerChallengeResponse, error)
}

// UnimplementedMeviusChallengeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMeviusChallengeServiceServer struct {
}

func (UnimplementedMeviusChallengeServiceServer) GetActivePlayerChallenge(context.Context, *protochallenge.GetActivePlayerChallengeRequest) (*protochallenge.GetActivePlayerChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePlayerChallenge not implemented")
}

// UnsafeMeviusChallengeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeviusChallengeServiceServer will
// result in compilation errors.
type UnsafeMeviusChallengeServiceServer interface {
	mustEmbedUnimplementedMeviusChallengeServiceServer()
}

func RegisterMeviusChallengeServiceServer(s grpc.ServiceRegistrar, srv MeviusChallengeServiceServer) {
	s.RegisterService(&MeviusChallengeService_ServiceDesc, srv)
}

func _MeviusChallengeService_GetActivePlayerChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protochallenge.GetActivePlayerChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusChallengeServiceServer).GetActivePlayerChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusChallengeService_GetActivePlayerChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusChallengeServiceServer).GetActivePlayerChallenge(ctx, req.(*protochallenge.GetActivePlayerChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeviusChallengeService_ServiceDesc is the grpc.ServiceDesc for MeviusChallengeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeviusChallengeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.MeviusChallengeService",
	HandlerType: (*MeviusChallengeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActivePlayerChallenge",
			Handler:    _MeviusChallengeService_GetActivePlayerChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/challenge.service.proto",
}
