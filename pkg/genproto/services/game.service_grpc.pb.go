// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: game.service.proto

package services

import (
	context "context"
	protoc "github.com/justjack1521/mevium/pkg/genproto/protoc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeviusGameServiceClient is the client API for MeviusGameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeviusGameServiceClient interface {
	BattleComplete(ctx context.Context, in *protoc.BattleCompleteRequest, opts ...grpc.CallOption) (*protoc.BattleCompleteResponse, error)
	BattleRevive(ctx context.Context, in *protoc.BattleReviveRequest, opts ...grpc.CallOption) (*protoc.BattleReviveResponse, error)
	BattleStart(ctx context.Context, in *protoc.BattleStartRequest, opts ...grpc.CallOption) (*protoc.BattleStartResponse, error)
	CardSale(ctx context.Context, in *protoc.CardSaleRequest, opts ...grpc.CallOption) (*protoc.CardSaleResponse, error)
	CardFusion(ctx context.Context, in *protoc.CardFusionRequest, opts ...grpc.CallOption) (*protoc.CardFusionResponse, error)
	CardBoostFusion(ctx context.Context, in *protoc.CardBoostFusionRequest, opts ...grpc.CallOption) (*protoc.CardBoostFusionResponse, error)
	CreateProfile(ctx context.Context, in *protoc.CreateProfileRequest, opts ...grpc.CallOption) (*protoc.CreateProfileResponse, error)
	ClaimEventRanking(ctx context.Context, in *protoc.ClaimEventRankingRequest, opts ...grpc.CallOption) (*protoc.ClaimEventRankingResponse, error)
	ClaimMailboxItem(ctx context.Context, in *protoc.ClaimMailBoxItemRequest, opts ...grpc.CallOption) (*protoc.ClaimMailBoxItemResponse, error)
	ConfirmDailyMission(ctx context.Context, in *protoc.ConfirmDailyMissionRequest, opts ...grpc.CallOption) (*protoc.ConfirmDailyMissionResponse, error)
	DeckEdit(ctx context.Context, in *protoc.DeckEditAllRequest, opts ...grpc.CallOption) (*protoc.DeckEditAllResponse, error)
	FetchPlayerData(ctx context.Context, in *protoc.FetchPlayerDataRequest, opts ...grpc.CallOption) (*protoc.FetchPlayerDataResponse, error)
	FavouriteCard(ctx context.Context, in *protoc.CardFavouriteRequest, opts ...grpc.CallOption) (*protoc.CardFavouriteResponse, error)
	RestoreStamina(ctx context.Context, in *protoc.StaminaRestoreRequest, opts ...grpc.CallOption) (*protoc.StaminaRestoreResponse, error)
	Teleport(ctx context.Context, in *protoc.TeleportRequest, opts ...grpc.CallOption) (*protoc.TeleportResponse, error)
	UpdateProfile(ctx context.Context, in *protoc.UpdateProfileRequest, opts ...grpc.CallOption) (*protoc.UpdateProfileResponse, error)
}

type meviusGameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeviusGameServiceClient(cc grpc.ClientConnInterface) MeviusGameServiceClient {
	return &meviusGameServiceClient{cc}
}

func (c *meviusGameServiceClient) BattleComplete(ctx context.Context, in *protoc.BattleCompleteRequest, opts ...grpc.CallOption) (*protoc.BattleCompleteResponse, error) {
	out := new(protoc.BattleCompleteResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/BattleComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) BattleRevive(ctx context.Context, in *protoc.BattleReviveRequest, opts ...grpc.CallOption) (*protoc.BattleReviveResponse, error) {
	out := new(protoc.BattleReviveResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/BattleRevive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) BattleStart(ctx context.Context, in *protoc.BattleStartRequest, opts ...grpc.CallOption) (*protoc.BattleStartResponse, error) {
	out := new(protoc.BattleStartResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/BattleStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CardSale(ctx context.Context, in *protoc.CardSaleRequest, opts ...grpc.CallOption) (*protoc.CardSaleResponse, error) {
	out := new(protoc.CardSaleResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/CardSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CardFusion(ctx context.Context, in *protoc.CardFusionRequest, opts ...grpc.CallOption) (*protoc.CardFusionResponse, error) {
	out := new(protoc.CardFusionResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/CardFusion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CardBoostFusion(ctx context.Context, in *protoc.CardBoostFusionRequest, opts ...grpc.CallOption) (*protoc.CardBoostFusionResponse, error) {
	out := new(protoc.CardBoostFusionResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/CardBoostFusion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CreateProfile(ctx context.Context, in *protoc.CreateProfileRequest, opts ...grpc.CallOption) (*protoc.CreateProfileResponse, error) {
	out := new(protoc.CreateProfileResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ClaimEventRanking(ctx context.Context, in *protoc.ClaimEventRankingRequest, opts ...grpc.CallOption) (*protoc.ClaimEventRankingResponse, error) {
	out := new(protoc.ClaimEventRankingResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/ClaimEventRanking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ClaimMailboxItem(ctx context.Context, in *protoc.ClaimMailBoxItemRequest, opts ...grpc.CallOption) (*protoc.ClaimMailBoxItemResponse, error) {
	out := new(protoc.ClaimMailBoxItemResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/ClaimMailboxItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ConfirmDailyMission(ctx context.Context, in *protoc.ConfirmDailyMissionRequest, opts ...grpc.CallOption) (*protoc.ConfirmDailyMissionResponse, error) {
	out := new(protoc.ConfirmDailyMissionResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/ConfirmDailyMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) DeckEdit(ctx context.Context, in *protoc.DeckEditAllRequest, opts ...grpc.CallOption) (*protoc.DeckEditAllResponse, error) {
	out := new(protoc.DeckEditAllResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/DeckEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) FetchPlayerData(ctx context.Context, in *protoc.FetchPlayerDataRequest, opts ...grpc.CallOption) (*protoc.FetchPlayerDataResponse, error) {
	out := new(protoc.FetchPlayerDataResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/FetchPlayerData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) FavouriteCard(ctx context.Context, in *protoc.CardFavouriteRequest, opts ...grpc.CallOption) (*protoc.CardFavouriteResponse, error) {
	out := new(protoc.CardFavouriteResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/FavouriteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) RestoreStamina(ctx context.Context, in *protoc.StaminaRestoreRequest, opts ...grpc.CallOption) (*protoc.StaminaRestoreResponse, error) {
	out := new(protoc.StaminaRestoreResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/RestoreStamina", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) Teleport(ctx context.Context, in *protoc.TeleportRequest, opts ...grpc.CallOption) (*protoc.TeleportResponse, error) {
	out := new(protoc.TeleportResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/Teleport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) UpdateProfile(ctx context.Context, in *protoc.UpdateProfileRequest, opts ...grpc.CallOption) (*protoc.UpdateProfileResponse, error) {
	out := new(protoc.UpdateProfileResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusGameService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeviusGameServiceServer is the server API for MeviusGameService service.
// All implementations should embed UnimplementedMeviusGameServiceServer
// for forward compatibility
type MeviusGameServiceServer interface {
	BattleComplete(context.Context, *protoc.BattleCompleteRequest) (*protoc.BattleCompleteResponse, error)
	BattleRevive(context.Context, *protoc.BattleReviveRequest) (*protoc.BattleReviveResponse, error)
	BattleStart(context.Context, *protoc.BattleStartRequest) (*protoc.BattleStartResponse, error)
	CardSale(context.Context, *protoc.CardSaleRequest) (*protoc.CardSaleResponse, error)
	CardFusion(context.Context, *protoc.CardFusionRequest) (*protoc.CardFusionResponse, error)
	CardBoostFusion(context.Context, *protoc.CardBoostFusionRequest) (*protoc.CardBoostFusionResponse, error)
	CreateProfile(context.Context, *protoc.CreateProfileRequest) (*protoc.CreateProfileResponse, error)
	ClaimEventRanking(context.Context, *protoc.ClaimEventRankingRequest) (*protoc.ClaimEventRankingResponse, error)
	ClaimMailboxItem(context.Context, *protoc.ClaimMailBoxItemRequest) (*protoc.ClaimMailBoxItemResponse, error)
	ConfirmDailyMission(context.Context, *protoc.ConfirmDailyMissionRequest) (*protoc.ConfirmDailyMissionResponse, error)
	DeckEdit(context.Context, *protoc.DeckEditAllRequest) (*protoc.DeckEditAllResponse, error)
	FetchPlayerData(context.Context, *protoc.FetchPlayerDataRequest) (*protoc.FetchPlayerDataResponse, error)
	FavouriteCard(context.Context, *protoc.CardFavouriteRequest) (*protoc.CardFavouriteResponse, error)
	RestoreStamina(context.Context, *protoc.StaminaRestoreRequest) (*protoc.StaminaRestoreResponse, error)
	Teleport(context.Context, *protoc.TeleportRequest) (*protoc.TeleportResponse, error)
	UpdateProfile(context.Context, *protoc.UpdateProfileRequest) (*protoc.UpdateProfileResponse, error)
}

// UnimplementedMeviusGameServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMeviusGameServiceServer struct {
}

func (UnimplementedMeviusGameServiceServer) BattleComplete(context.Context, *protoc.BattleCompleteRequest) (*protoc.BattleCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattleComplete not implemented")
}
func (UnimplementedMeviusGameServiceServer) BattleRevive(context.Context, *protoc.BattleReviveRequest) (*protoc.BattleReviveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattleRevive not implemented")
}
func (UnimplementedMeviusGameServiceServer) BattleStart(context.Context, *protoc.BattleStartRequest) (*protoc.BattleStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattleStart not implemented")
}
func (UnimplementedMeviusGameServiceServer) CardSale(context.Context, *protoc.CardSaleRequest) (*protoc.CardSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardSale not implemented")
}
func (UnimplementedMeviusGameServiceServer) CardFusion(context.Context, *protoc.CardFusionRequest) (*protoc.CardFusionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardFusion not implemented")
}
func (UnimplementedMeviusGameServiceServer) CardBoostFusion(context.Context, *protoc.CardBoostFusionRequest) (*protoc.CardBoostFusionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardBoostFusion not implemented")
}
func (UnimplementedMeviusGameServiceServer) CreateProfile(context.Context, *protoc.CreateProfileRequest) (*protoc.CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedMeviusGameServiceServer) ClaimEventRanking(context.Context, *protoc.ClaimEventRankingRequest) (*protoc.ClaimEventRankingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimEventRanking not implemented")
}
func (UnimplementedMeviusGameServiceServer) ClaimMailboxItem(context.Context, *protoc.ClaimMailBoxItemRequest) (*protoc.ClaimMailBoxItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimMailboxItem not implemented")
}
func (UnimplementedMeviusGameServiceServer) ConfirmDailyMission(context.Context, *protoc.ConfirmDailyMissionRequest) (*protoc.ConfirmDailyMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDailyMission not implemented")
}
func (UnimplementedMeviusGameServiceServer) DeckEdit(context.Context, *protoc.DeckEditAllRequest) (*protoc.DeckEditAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeckEdit not implemented")
}
func (UnimplementedMeviusGameServiceServer) FetchPlayerData(context.Context, *protoc.FetchPlayerDataRequest) (*protoc.FetchPlayerDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPlayerData not implemented")
}
func (UnimplementedMeviusGameServiceServer) FavouriteCard(context.Context, *protoc.CardFavouriteRequest) (*protoc.CardFavouriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavouriteCard not implemented")
}
func (UnimplementedMeviusGameServiceServer) RestoreStamina(context.Context, *protoc.StaminaRestoreRequest) (*protoc.StaminaRestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreStamina not implemented")
}
func (UnimplementedMeviusGameServiceServer) Teleport(context.Context, *protoc.TeleportRequest) (*protoc.TeleportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Teleport not implemented")
}
func (UnimplementedMeviusGameServiceServer) UpdateProfile(context.Context, *protoc.UpdateProfileRequest) (*protoc.UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}

// UnsafeMeviusGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeviusGameServiceServer will
// result in compilation errors.
type UnsafeMeviusGameServiceServer interface {
	mustEmbedUnimplementedMeviusGameServiceServer()
}

func RegisterMeviusGameServiceServer(s grpc.ServiceRegistrar, srv MeviusGameServiceServer) {
	s.RegisterService(&MeviusGameService_ServiceDesc, srv)
}

func _MeviusGameService_BattleComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.BattleCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).BattleComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/BattleComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).BattleComplete(ctx, req.(*protoc.BattleCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_BattleRevive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.BattleReviveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).BattleRevive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/BattleRevive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).BattleRevive(ctx, req.(*protoc.BattleReviveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_BattleStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.BattleStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).BattleStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/BattleStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).BattleStart(ctx, req.(*protoc.BattleStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CardSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.CardSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CardSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/CardSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CardSale(ctx, req.(*protoc.CardSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CardFusion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.CardFusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CardFusion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/CardFusion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CardFusion(ctx, req.(*protoc.CardFusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CardBoostFusion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.CardBoostFusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CardBoostFusion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/CardBoostFusion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CardBoostFusion(ctx, req.(*protoc.CardBoostFusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CreateProfile(ctx, req.(*protoc.CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ClaimEventRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.ClaimEventRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ClaimEventRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/ClaimEventRanking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ClaimEventRanking(ctx, req.(*protoc.ClaimEventRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ClaimMailboxItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.ClaimMailBoxItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ClaimMailboxItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/ClaimMailboxItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ClaimMailboxItem(ctx, req.(*protoc.ClaimMailBoxItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ConfirmDailyMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.ConfirmDailyMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ConfirmDailyMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/ConfirmDailyMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ConfirmDailyMission(ctx, req.(*protoc.ConfirmDailyMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_DeckEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.DeckEditAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).DeckEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/DeckEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).DeckEdit(ctx, req.(*protoc.DeckEditAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_FetchPlayerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.FetchPlayerDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).FetchPlayerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/FetchPlayerData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).FetchPlayerData(ctx, req.(*protoc.FetchPlayerDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_FavouriteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.CardFavouriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).FavouriteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/FavouriteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).FavouriteCard(ctx, req.(*protoc.CardFavouriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_RestoreStamina_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.StaminaRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).RestoreStamina(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/RestoreStamina",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).RestoreStamina(ctx, req.(*protoc.StaminaRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_Teleport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.TeleportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).Teleport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/Teleport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).Teleport(ctx, req.(*protoc.TeleportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoc.UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusGameService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).UpdateProfile(ctx, req.(*protoc.UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeviusGameService_ServiceDesc is the grpc.ServiceDesc for MeviusGameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeviusGameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.MeviusGameService",
	HandlerType: (*MeviusGameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BattleComplete",
			Handler:    _MeviusGameService_BattleComplete_Handler,
		},
		{
			MethodName: "BattleRevive",
			Handler:    _MeviusGameService_BattleRevive_Handler,
		},
		{
			MethodName: "BattleStart",
			Handler:    _MeviusGameService_BattleStart_Handler,
		},
		{
			MethodName: "CardSale",
			Handler:    _MeviusGameService_CardSale_Handler,
		},
		{
			MethodName: "CardFusion",
			Handler:    _MeviusGameService_CardFusion_Handler,
		},
		{
			MethodName: "CardBoostFusion",
			Handler:    _MeviusGameService_CardBoostFusion_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _MeviusGameService_CreateProfile_Handler,
		},
		{
			MethodName: "ClaimEventRanking",
			Handler:    _MeviusGameService_ClaimEventRanking_Handler,
		},
		{
			MethodName: "ClaimMailboxItem",
			Handler:    _MeviusGameService_ClaimMailboxItem_Handler,
		},
		{
			MethodName: "ConfirmDailyMission",
			Handler:    _MeviusGameService_ConfirmDailyMission_Handler,
		},
		{
			MethodName: "DeckEdit",
			Handler:    _MeviusGameService_DeckEdit_Handler,
		},
		{
			MethodName: "FetchPlayerData",
			Handler:    _MeviusGameService_FetchPlayerData_Handler,
		},
		{
			MethodName: "FavouriteCard",
			Handler:    _MeviusGameService_FavouriteCard_Handler,
		},
		{
			MethodName: "RestoreStamina",
			Handler:    _MeviusGameService_RestoreStamina_Handler,
		},
		{
			MethodName: "Teleport",
			Handler:    _MeviusGameService_Teleport_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _MeviusGameService_UpdateProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.service.proto",
}
