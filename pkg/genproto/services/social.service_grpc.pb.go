// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: social.service.proto

package services

import (
	context "context"
	protop "github.com/justjack1521/mevium/pkg/genproto/protop"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeviusPresenceServiceClient is the client API for MeviusPresenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeviusPresenceServiceClient interface {
	UpdatePlayerPresence(ctx context.Context, in *protop.UpdatePlayerPresenceRequest, opts ...grpc.CallOption) (*protop.UpdatePlayerPresenceResponse, error)
	UpdatePlayerPosition(ctx context.Context, in *protop.UpdatePlayerPositionRequest, opts ...grpc.CallOption) (*protop.UpdatePlayerPositionResponse, error)
	UpdateCompanion(ctx context.Context, in *protop.UpdatePlayerCompanionRequest, opts ...grpc.CallOption) (*protop.UpdatePlayerCompanionResponse, error)
}

type meviusPresenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeviusPresenceServiceClient(cc grpc.ClientConnInterface) MeviusPresenceServiceClient {
	return &meviusPresenceServiceClient{cc}
}

func (c *meviusPresenceServiceClient) UpdatePlayerPresence(ctx context.Context, in *protop.UpdatePlayerPresenceRequest, opts ...grpc.CallOption) (*protop.UpdatePlayerPresenceResponse, error) {
	out := new(protop.UpdatePlayerPresenceResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusPresenceService/UpdatePlayerPresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusPresenceServiceClient) UpdatePlayerPosition(ctx context.Context, in *protop.UpdatePlayerPositionRequest, opts ...grpc.CallOption) (*protop.UpdatePlayerPositionResponse, error) {
	out := new(protop.UpdatePlayerPositionResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusPresenceService/UpdatePlayerPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusPresenceServiceClient) UpdateCompanion(ctx context.Context, in *protop.UpdatePlayerCompanionRequest, opts ...grpc.CallOption) (*protop.UpdatePlayerCompanionResponse, error) {
	out := new(protop.UpdatePlayerCompanionResponse)
	err := c.cc.Invoke(ctx, "/service.MeviusPresenceService/UpdateCompanion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeviusPresenceServiceServer is the server API for MeviusPresenceService service.
// All implementations should embed UnimplementedMeviusPresenceServiceServer
// for forward compatibility
type MeviusPresenceServiceServer interface {
	UpdatePlayerPresence(context.Context, *protop.UpdatePlayerPresenceRequest) (*protop.UpdatePlayerPresenceResponse, error)
	UpdatePlayerPosition(context.Context, *protop.UpdatePlayerPositionRequest) (*protop.UpdatePlayerPositionResponse, error)
	UpdateCompanion(context.Context, *protop.UpdatePlayerCompanionRequest) (*protop.UpdatePlayerCompanionResponse, error)
}

// UnimplementedMeviusPresenceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMeviusPresenceServiceServer struct {
}

func (UnimplementedMeviusPresenceServiceServer) UpdatePlayerPresence(context.Context, *protop.UpdatePlayerPresenceRequest) (*protop.UpdatePlayerPresenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerPresence not implemented")
}
func (UnimplementedMeviusPresenceServiceServer) UpdatePlayerPosition(context.Context, *protop.UpdatePlayerPositionRequest) (*protop.UpdatePlayerPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerPosition not implemented")
}
func (UnimplementedMeviusPresenceServiceServer) UpdateCompanion(context.Context, *protop.UpdatePlayerCompanionRequest) (*protop.UpdatePlayerCompanionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanion not implemented")
}

// UnsafeMeviusPresenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeviusPresenceServiceServer will
// result in compilation errors.
type UnsafeMeviusPresenceServiceServer interface {
	mustEmbedUnimplementedMeviusPresenceServiceServer()
}

func RegisterMeviusPresenceServiceServer(s grpc.ServiceRegistrar, srv MeviusPresenceServiceServer) {
	s.RegisterService(&MeviusPresenceService_ServiceDesc, srv)
}

func _MeviusPresenceService_UpdatePlayerPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protop.UpdatePlayerPresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusPresenceServiceServer).UpdatePlayerPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusPresenceService/UpdatePlayerPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusPresenceServiceServer).UpdatePlayerPresence(ctx, req.(*protop.UpdatePlayerPresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusPresenceService_UpdatePlayerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protop.UpdatePlayerPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusPresenceServiceServer).UpdatePlayerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusPresenceService/UpdatePlayerPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusPresenceServiceServer).UpdatePlayerPosition(ctx, req.(*protop.UpdatePlayerPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusPresenceService_UpdateCompanion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protop.UpdatePlayerCompanionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusPresenceServiceServer).UpdateCompanion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MeviusPresenceService/UpdateCompanion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusPresenceServiceServer).UpdateCompanion(ctx, req.(*protop.UpdatePlayerCompanionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeviusPresenceService_ServiceDesc is the grpc.ServiceDesc for MeviusPresenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeviusPresenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.MeviusPresenceService",
	HandlerType: (*MeviusPresenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePlayerPresence",
			Handler:    _MeviusPresenceService_UpdatePlayerPresence_Handler,
		},
		{
			MethodName: "UpdatePlayerPosition",
			Handler:    _MeviusPresenceService_UpdatePlayerPosition_Handler,
		},
		{
			MethodName: "UpdateCompanion",
			Handler:    _MeviusPresenceService_UpdateCompanion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "social.service.proto",
}
