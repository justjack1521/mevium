// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: service/multi.service.proto

package services

import (
	context "context"
	protomulti "github.com/justjack1521/mevium/pkg/genproto/protomulti"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MeviusMultiService_SearchLobby_FullMethodName = "/service.MeviusMultiService/SearchLobby"
)

// MeviusMultiServiceClient is the client API for MeviusMultiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeviusMultiServiceClient interface {
	SearchLobby(ctx context.Context, in *protomulti.SearchLobbyRequest, opts ...grpc.CallOption) (*protomulti.SearchLobbyResponse, error)
}

type meviusMultiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeviusMultiServiceClient(cc grpc.ClientConnInterface) MeviusMultiServiceClient {
	return &meviusMultiServiceClient{cc}
}

func (c *meviusMultiServiceClient) SearchLobby(ctx context.Context, in *protomulti.SearchLobbyRequest, opts ...grpc.CallOption) (*protomulti.SearchLobbyResponse, error) {
	out := new(protomulti.SearchLobbyResponse)
	err := c.cc.Invoke(ctx, MeviusMultiService_SearchLobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeviusMultiServiceServer is the server API for MeviusMultiService service.
// All implementations should embed UnimplementedMeviusMultiServiceServer
// for forward compatibility
type MeviusMultiServiceServer interface {
	SearchLobby(context.Context, *protomulti.SearchLobbyRequest) (*protomulti.SearchLobbyResponse, error)
}

// UnimplementedMeviusMultiServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMeviusMultiServiceServer struct {
}

func (UnimplementedMeviusMultiServiceServer) SearchLobby(context.Context, *protomulti.SearchLobbyRequest) (*protomulti.SearchLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLobby not implemented")
}

// UnsafeMeviusMultiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeviusMultiServiceServer will
// result in compilation errors.
type UnsafeMeviusMultiServiceServer interface {
	mustEmbedUnimplementedMeviusMultiServiceServer()
}

func RegisterMeviusMultiServiceServer(s grpc.ServiceRegistrar, srv MeviusMultiServiceServer) {
	s.RegisterService(&MeviusMultiService_ServiceDesc, srv)
}

func _MeviusMultiService_SearchLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protomulti.SearchLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusMultiServiceServer).SearchLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusMultiService_SearchLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusMultiServiceServer).SearchLobby(ctx, req.(*protomulti.SearchLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeviusMultiService_ServiceDesc is the grpc.ServiceDesc for MeviusMultiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeviusMultiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.MeviusMultiService",
	HandlerType: (*MeviusMultiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchLobby",
			Handler:    _MeviusMultiService_SearchLobby_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/multi.service.proto",
}
