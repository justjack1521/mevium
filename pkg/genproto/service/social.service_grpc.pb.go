// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: service/social.service.proto

package services

import (
	context "context"
	protosocial "github.com/justjack1521/mevium/pkg/genproto/protosocial"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MeviusSocialService_FollowPlayer_FullMethodName          = "/service.MeviusSocialService/FollowPlayer"
	MeviusSocialService_UnfollowPlayer_FullMethodName        = "/service.MeviusSocialService/UnfollowPlayer"
	MeviusSocialService_PlayerSearch_FullMethodName          = "/service.MeviusSocialService/PlayerSearch"
	MeviusSocialService_FetchPlayerSocialInfo_FullMethodName = "/service.MeviusSocialService/FetchPlayerSocialInfo"
	MeviusSocialService_GetPlayerIdentity_FullMethodName     = "/service.MeviusSocialService/GetPlayerIdentity"
)

// MeviusSocialServiceClient is the client API for MeviusSocialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeviusSocialServiceClient interface {
	FollowPlayer(ctx context.Context, in *protosocial.FollowPlayerRequest, opts ...grpc.CallOption) (*protosocial.FollowPlayerResponse, error)
	UnfollowPlayer(ctx context.Context, in *protosocial.UnfollowPlayerRequest, opts ...grpc.CallOption) (*protosocial.UnfollowPlayerResponse, error)
	PlayerSearch(ctx context.Context, in *protosocial.PlayerSearchRequest, opts ...grpc.CallOption) (*protosocial.PlayerSearchResponse, error)
	FetchPlayerSocialInfo(ctx context.Context, in *protosocial.FetchPlayerSocialInfoRequest, opts ...grpc.CallOption) (*protosocial.FetchPlayerSocialInfoResponse, error)
	GetPlayerIdentity(ctx context.Context, in *protosocial.GetPlayerIdentityRequest, opts ...grpc.CallOption) (*protosocial.GetPlayerIdentityResponse, error)
}

type meviusSocialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeviusSocialServiceClient(cc grpc.ClientConnInterface) MeviusSocialServiceClient {
	return &meviusSocialServiceClient{cc}
}

func (c *meviusSocialServiceClient) FollowPlayer(ctx context.Context, in *protosocial.FollowPlayerRequest, opts ...grpc.CallOption) (*protosocial.FollowPlayerResponse, error) {
	out := new(protosocial.FollowPlayerResponse)
	err := c.cc.Invoke(ctx, MeviusSocialService_FollowPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusSocialServiceClient) UnfollowPlayer(ctx context.Context, in *protosocial.UnfollowPlayerRequest, opts ...grpc.CallOption) (*protosocial.UnfollowPlayerResponse, error) {
	out := new(protosocial.UnfollowPlayerResponse)
	err := c.cc.Invoke(ctx, MeviusSocialService_UnfollowPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusSocialServiceClient) PlayerSearch(ctx context.Context, in *protosocial.PlayerSearchRequest, opts ...grpc.CallOption) (*protosocial.PlayerSearchResponse, error) {
	out := new(protosocial.PlayerSearchResponse)
	err := c.cc.Invoke(ctx, MeviusSocialService_PlayerSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusSocialServiceClient) FetchPlayerSocialInfo(ctx context.Context, in *protosocial.FetchPlayerSocialInfoRequest, opts ...grpc.CallOption) (*protosocial.FetchPlayerSocialInfoResponse, error) {
	out := new(protosocial.FetchPlayerSocialInfoResponse)
	err := c.cc.Invoke(ctx, MeviusSocialService_FetchPlayerSocialInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusSocialServiceClient) GetPlayerIdentity(ctx context.Context, in *protosocial.GetPlayerIdentityRequest, opts ...grpc.CallOption) (*protosocial.GetPlayerIdentityResponse, error) {
	out := new(protosocial.GetPlayerIdentityResponse)
	err := c.cc.Invoke(ctx, MeviusSocialService_GetPlayerIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeviusSocialServiceServer is the server API for MeviusSocialService service.
// All implementations should embed UnimplementedMeviusSocialServiceServer
// for forward compatibility
type MeviusSocialServiceServer interface {
	FollowPlayer(context.Context, *protosocial.FollowPlayerRequest) (*protosocial.FollowPlayerResponse, error)
	UnfollowPlayer(context.Context, *protosocial.UnfollowPlayerRequest) (*protosocial.UnfollowPlayerResponse, error)
	PlayerSearch(context.Context, *protosocial.PlayerSearchRequest) (*protosocial.PlayerSearchResponse, error)
	FetchPlayerSocialInfo(context.Context, *protosocial.FetchPlayerSocialInfoRequest) (*protosocial.FetchPlayerSocialInfoResponse, error)
	GetPlayerIdentity(context.Context, *protosocial.GetPlayerIdentityRequest) (*protosocial.GetPlayerIdentityResponse, error)
}

// UnimplementedMeviusSocialServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMeviusSocialServiceServer struct {
}

func (UnimplementedMeviusSocialServiceServer) FollowPlayer(context.Context, *protosocial.FollowPlayerRequest) (*protosocial.FollowPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowPlayer not implemented")
}
func (UnimplementedMeviusSocialServiceServer) UnfollowPlayer(context.Context, *protosocial.UnfollowPlayerRequest) (*protosocial.UnfollowPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowPlayer not implemented")
}
func (UnimplementedMeviusSocialServiceServer) PlayerSearch(context.Context, *protosocial.PlayerSearchRequest) (*protosocial.PlayerSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerSearch not implemented")
}
func (UnimplementedMeviusSocialServiceServer) FetchPlayerSocialInfo(context.Context, *protosocial.FetchPlayerSocialInfoRequest) (*protosocial.FetchPlayerSocialInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPlayerSocialInfo not implemented")
}
func (UnimplementedMeviusSocialServiceServer) GetPlayerIdentity(context.Context, *protosocial.GetPlayerIdentityRequest) (*protosocial.GetPlayerIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerIdentity not implemented")
}

// UnsafeMeviusSocialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeviusSocialServiceServer will
// result in compilation errors.
type UnsafeMeviusSocialServiceServer interface {
	mustEmbedUnimplementedMeviusSocialServiceServer()
}

func RegisterMeviusSocialServiceServer(s grpc.ServiceRegistrar, srv MeviusSocialServiceServer) {
	s.RegisterService(&MeviusSocialService_ServiceDesc, srv)
}

func _MeviusSocialService_FollowPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protosocial.FollowPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusSocialServiceServer).FollowPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusSocialService_FollowPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusSocialServiceServer).FollowPlayer(ctx, req.(*protosocial.FollowPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusSocialService_UnfollowPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protosocial.UnfollowPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusSocialServiceServer).UnfollowPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusSocialService_UnfollowPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusSocialServiceServer).UnfollowPlayer(ctx, req.(*protosocial.UnfollowPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusSocialService_PlayerSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protosocial.PlayerSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusSocialServiceServer).PlayerSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusSocialService_PlayerSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusSocialServiceServer).PlayerSearch(ctx, req.(*protosocial.PlayerSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusSocialService_FetchPlayerSocialInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protosocial.FetchPlayerSocialInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusSocialServiceServer).FetchPlayerSocialInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusSocialService_FetchPlayerSocialInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusSocialServiceServer).FetchPlayerSocialInfo(ctx, req.(*protosocial.FetchPlayerSocialInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusSocialService_GetPlayerIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protosocial.GetPlayerIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusSocialServiceServer).GetPlayerIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusSocialService_GetPlayerIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusSocialServiceServer).GetPlayerIdentity(ctx, req.(*protosocial.GetPlayerIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeviusSocialService_ServiceDesc is the grpc.ServiceDesc for MeviusSocialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeviusSocialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.MeviusSocialService",
	HandlerType: (*MeviusSocialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowPlayer",
			Handler:    _MeviusSocialService_FollowPlayer_Handler,
		},
		{
			MethodName: "UnfollowPlayer",
			Handler:    _MeviusSocialService_UnfollowPlayer_Handler,
		},
		{
			MethodName: "PlayerSearch",
			Handler:    _MeviusSocialService_PlayerSearch_Handler,
		},
		{
			MethodName: "FetchPlayerSocialInfo",
			Handler:    _MeviusSocialService_FetchPlayerSocialInfo_Handler,
		},
		{
			MethodName: "GetPlayerIdentity",
			Handler:    _MeviusSocialService_GetPlayerIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/social.service.proto",
}
