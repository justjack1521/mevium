// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: service/game.service.proto

package services

import (
	context "context"
	protogame "github.com/justjack1521/mevium/pkg/genproto/protogame"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MeviusGameService_BattleComplete_FullMethodName         = "/service.MeviusGameService/BattleComplete"
	MeviusGameService_BattleRevive_FullMethodName           = "/service.MeviusGameService/BattleRevive"
	MeviusGameService_BattleStart_FullMethodName            = "/service.MeviusGameService/BattleStart"
	MeviusGameService_CardAugment_FullMethodName            = "/service.MeviusGameService/CardAugment"
	MeviusGameService_CardFavourite_FullMethodName          = "/service.MeviusGameService/CardFavourite"
	MeviusGameService_CardFusion_FullMethodName             = "/service.MeviusGameService/CardFusion"
	MeviusGameService_CardBoostFusion_FullMethodName        = "/service.MeviusGameService/CardBoostFusion"
	MeviusGameService_CardSale_FullMethodName               = "/service.MeviusGameService/CardSale"
	MeviusGameService_CardAutoSell_FullMethodName           = "/service.MeviusGameService/CardAutoSell"
	MeviusGameService_CardTransfer_FullMethodName           = "/service.MeviusGameService/CardTransfer"
	MeviusGameService_CreateProfile_FullMethodName          = "/service.MeviusGameService/CreateProfile"
	MeviusGameService_ClaimEventRanking_FullMethodName      = "/service.MeviusGameService/ClaimEventRanking"
	MeviusGameService_ClaimLoginCampaign_FullMethodName     = "/service.MeviusGameService/ClaimLoginCampaign"
	MeviusGameService_ClaimMailboxItem_FullMethodName       = "/service.MeviusGameService/ClaimMailboxItem"
	MeviusGameService_ClaimAllMailboxItem_FullMethodName    = "/service.MeviusGameService/ClaimAllMailboxItem"
	MeviusGameService_ClaimDailyMission_FullMethodName      = "/service.MeviusGameService/ClaimDailyMission"
	MeviusGameService_ClaimRentalReward_FullMethodName      = "/service.MeviusGameService/ClaimRentalReward"
	MeviusGameService_ConfirmDailyMission_FullMethodName    = "/service.MeviusGameService/ConfirmDailyMission"
	MeviusGameService_DeckEdit_FullMethodName               = "/service.MeviusGameService/DeckEdit"
	MeviusGameService_DeleteAllMailboxItem_FullMethodName   = "/service.MeviusGameService/DeleteAllMailboxItem"
	MeviusGameService_ExpandAbilityCardSlot_FullMethodName  = "/service.MeviusGameService/ExpandAbilityCardSlot"
	MeviusGameService_FetchPlayerData_FullMethodName        = "/service.MeviusGameService/FetchPlayerData"
	MeviusGameService_FirstDailyLogin_FullMethodName        = "/service.MeviusGameService/FirstDailyLogin"
	MeviusGameService_ProcessRegionEvent_FullMethodName     = "/service.MeviusGameService/ProcessRegionEvent"
	MeviusGameService_ProcessRegionNodeEvent_FullMethodName = "/service.MeviusGameService/ProcessRegionNodeEvent"
	MeviusGameService_RestoreStamina_FullMethodName         = "/service.MeviusGameService/RestoreStamina"
	MeviusGameService_SkillPanelUnlock_FullMethodName       = "/service.MeviusGameService/SkillPanelUnlock"
	MeviusGameService_Teleport_FullMethodName               = "/service.MeviusGameService/Teleport"
	MeviusGameService_UpdateProfile_FullMethodName          = "/service.MeviusGameService/UpdateProfile"
	MeviusGameService_PurchaseItem_FullMethodName           = "/service.MeviusGameService/PurchaseItem"
	MeviusGameService_PurchaseCard_FullMethodName           = "/service.MeviusGameService/PurchaseCard"
	MeviusGameService_AbilityShopPurchase_FullMethodName    = "/service.MeviusGameService/AbilityShopPurchase"
	MeviusGameService_CompleteRegion_FullMethodName         = "/service.MeviusGameService/CompleteRegion"
	MeviusGameService_UnlockRegion_FullMethodName           = "/service.MeviusGameService/UnlockRegion"
	MeviusGameService_AbilityCardSummon_FullMethodName      = "/service.MeviusGameService/AbilityCardSummon"
	MeviusGameService_ExecuteDialogue_FullMethodName        = "/service.MeviusGameService/ExecuteDialogue"
	MeviusGameService_ClaimItemDistiller_FullMethodName     = "/service.MeviusGameService/ClaimItemDistiller"
	MeviusGameService_ClaimDungeon_FullMethodName           = "/service.MeviusGameService/ClaimDungeon"
)

// MeviusGameServiceClient is the client API for MeviusGameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeviusGameServiceClient interface {
	//External
	BattleComplete(ctx context.Context, in *protogame.BattleCompleteRequest, opts ...grpc.CallOption) (*protogame.BattleCompleteResponse, error)
	BattleRevive(ctx context.Context, in *protogame.BattleReviveRequest, opts ...grpc.CallOption) (*protogame.BattleReviveResponse, error)
	BattleStart(ctx context.Context, in *protogame.BattleStartRequest, opts ...grpc.CallOption) (*protogame.BattleStartResponse, error)
	CardAugment(ctx context.Context, in *protogame.CardAugmentRequest, opts ...grpc.CallOption) (*protogame.CardAugmentResponse, error)
	CardFavourite(ctx context.Context, in *protogame.CardFavouriteRequest, opts ...grpc.CallOption) (*protogame.CardFavouriteResponse, error)
	CardFusion(ctx context.Context, in *protogame.CardFusionRequest, opts ...grpc.CallOption) (*protogame.CardFusionResponse, error)
	CardBoostFusion(ctx context.Context, in *protogame.CardBoostFusionRequest, opts ...grpc.CallOption) (*protogame.CardBoostFusionResponse, error)
	CardSale(ctx context.Context, in *protogame.CardSaleRequest, opts ...grpc.CallOption) (*protogame.CardSaleResponse, error)
	CardAutoSell(ctx context.Context, in *protogame.CardAutoSellRequest, opts ...grpc.CallOption) (*protogame.CardAutoSellResponse, error)
	CardTransfer(ctx context.Context, in *protogame.CardTransferRequest, opts ...grpc.CallOption) (*protogame.CardTransferResponse, error)
	CreateProfile(ctx context.Context, in *protogame.CreateProfileRequest, opts ...grpc.CallOption) (*protogame.CreateProfileResponse, error)
	ClaimEventRanking(ctx context.Context, in *protogame.ClaimEventRankingRequest, opts ...grpc.CallOption) (*protogame.ClaimEventRankingResponse, error)
	ClaimLoginCampaign(ctx context.Context, in *protogame.ClaimLoginCampaignRequest, opts ...grpc.CallOption) (*protogame.ClaimLoginCampaignResponse, error)
	ClaimMailboxItem(ctx context.Context, in *protogame.ClaimMailBoxItemRequest, opts ...grpc.CallOption) (*protogame.ClaimMailBoxItemResponse, error)
	ClaimAllMailboxItem(ctx context.Context, in *protogame.ClaimAllMailBoxItemRequest, opts ...grpc.CallOption) (*protogame.ClaimAllMailBoxItemResponse, error)
	ClaimDailyMission(ctx context.Context, in *protogame.ClaimDailyMissionRequest, opts ...grpc.CallOption) (*protogame.ClaimDailyMissionResponse, error)
	ClaimRentalReward(ctx context.Context, in *protogame.ClaimRentalCardRewardRequest, opts ...grpc.CallOption) (*protogame.ClaimRentalCardRewardResponse, error)
	ConfirmDailyMission(ctx context.Context, in *protogame.ConfirmDailyMissionRequest, opts ...grpc.CallOption) (*protogame.ConfirmDailyMissionResponse, error)
	DeckEdit(ctx context.Context, in *protogame.DeckEditAllRequest, opts ...grpc.CallOption) (*protogame.DeckEditAllResponse, error)
	DeleteAllMailboxItem(ctx context.Context, in *protogame.DeleteAllMailboxItemRequest, opts ...grpc.CallOption) (*protogame.DeleteAllMailboxItemResponse, error)
	ExpandAbilityCardSlot(ctx context.Context, in *protogame.ExpandAbilityCardSlotRequest, opts ...grpc.CallOption) (*protogame.ExpandAbilityCardSlotResponse, error)
	FetchPlayerData(ctx context.Context, in *protogame.FetchPlayerDataRequest, opts ...grpc.CallOption) (*protogame.FetchPlayerDataResponse, error)
	FirstDailyLogin(ctx context.Context, in *protogame.FirstDailyLoginRequest, opts ...grpc.CallOption) (*protogame.FirstDailyLoginResponse, error)
	ProcessRegionEvent(ctx context.Context, in *protogame.ProcessRegionEventRequest, opts ...grpc.CallOption) (*protogame.ProcessRegionEventResponse, error)
	ProcessRegionNodeEvent(ctx context.Context, in *protogame.ProcessRegionNodeEventRequest, opts ...grpc.CallOption) (*protogame.ProcessRegionEventResponse, error)
	RestoreStamina(ctx context.Context, in *protogame.StaminaRestoreRequest, opts ...grpc.CallOption) (*protogame.StaminaRestoreResponse, error)
	SkillPanelUnlock(ctx context.Context, in *protogame.SkillPanelUnlockRequest, opts ...grpc.CallOption) (*protogame.SkillPanelUnlockResponse, error)
	Teleport(ctx context.Context, in *protogame.TeleportRequest, opts ...grpc.CallOption) (*protogame.TeleportResponse, error)
	UpdateProfile(ctx context.Context, in *protogame.UpdateProfileRequest, opts ...grpc.CallOption) (*protogame.UpdateProfileResponse, error)
	PurchaseItem(ctx context.Context, in *protogame.ItemShopItemPurchaseRequest, opts ...grpc.CallOption) (*protogame.ItemShopItemPurchaseResponse, error)
	PurchaseCard(ctx context.Context, in *protogame.ItemShopCardPurchaseRequest, opts ...grpc.CallOption) (*protogame.ItemShopCardPurchaseResponse, error)
	AbilityShopPurchase(ctx context.Context, in *protogame.AbilityShopPurchaseRequest, opts ...grpc.CallOption) (*protogame.AbilityShopPurchaseResponse, error)
	CompleteRegion(ctx context.Context, in *protogame.CompleteRegionMapRequest, opts ...grpc.CallOption) (*protogame.CompleteRegionMapResponse, error)
	UnlockRegion(ctx context.Context, in *protogame.RegionMapUnlockRequest, opts ...grpc.CallOption) (*protogame.RegionMapUnlockResponse, error)
	AbilityCardSummon(ctx context.Context, in *protogame.AbilityCardSummonRequest, opts ...grpc.CallOption) (*protogame.AbilityCardSummonResponse, error)
	ExecuteDialogue(ctx context.Context, in *protogame.ExecuteDialogueRequest, opts ...grpc.CallOption) (*protogame.ExecuteDialogueResponse, error)
	ClaimItemDistiller(ctx context.Context, in *protogame.ClaimItemDistillerRequest, opts ...grpc.CallOption) (*protogame.ClaimItemDistillerResponse, error)
	ClaimDungeon(ctx context.Context, in *protogame.ClaimDungeonRequest, opts ...grpc.CallOption) (*protogame.ClaimDungeonResponse, error)
}

type meviusGameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeviusGameServiceClient(cc grpc.ClientConnInterface) MeviusGameServiceClient {
	return &meviusGameServiceClient{cc}
}

func (c *meviusGameServiceClient) BattleComplete(ctx context.Context, in *protogame.BattleCompleteRequest, opts ...grpc.CallOption) (*protogame.BattleCompleteResponse, error) {
	out := new(protogame.BattleCompleteResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_BattleComplete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) BattleRevive(ctx context.Context, in *protogame.BattleReviveRequest, opts ...grpc.CallOption) (*protogame.BattleReviveResponse, error) {
	out := new(protogame.BattleReviveResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_BattleRevive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) BattleStart(ctx context.Context, in *protogame.BattleStartRequest, opts ...grpc.CallOption) (*protogame.BattleStartResponse, error) {
	out := new(protogame.BattleStartResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_BattleStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CardAugment(ctx context.Context, in *protogame.CardAugmentRequest, opts ...grpc.CallOption) (*protogame.CardAugmentResponse, error) {
	out := new(protogame.CardAugmentResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_CardAugment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CardFavourite(ctx context.Context, in *protogame.CardFavouriteRequest, opts ...grpc.CallOption) (*protogame.CardFavouriteResponse, error) {
	out := new(protogame.CardFavouriteResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_CardFavourite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CardFusion(ctx context.Context, in *protogame.CardFusionRequest, opts ...grpc.CallOption) (*protogame.CardFusionResponse, error) {
	out := new(protogame.CardFusionResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_CardFusion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CardBoostFusion(ctx context.Context, in *protogame.CardBoostFusionRequest, opts ...grpc.CallOption) (*protogame.CardBoostFusionResponse, error) {
	out := new(protogame.CardBoostFusionResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_CardBoostFusion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CardSale(ctx context.Context, in *protogame.CardSaleRequest, opts ...grpc.CallOption) (*protogame.CardSaleResponse, error) {
	out := new(protogame.CardSaleResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_CardSale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CardAutoSell(ctx context.Context, in *protogame.CardAutoSellRequest, opts ...grpc.CallOption) (*protogame.CardAutoSellResponse, error) {
	out := new(protogame.CardAutoSellResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_CardAutoSell_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CardTransfer(ctx context.Context, in *protogame.CardTransferRequest, opts ...grpc.CallOption) (*protogame.CardTransferResponse, error) {
	out := new(protogame.CardTransferResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_CardTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CreateProfile(ctx context.Context, in *protogame.CreateProfileRequest, opts ...grpc.CallOption) (*protogame.CreateProfileResponse, error) {
	out := new(protogame.CreateProfileResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_CreateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ClaimEventRanking(ctx context.Context, in *protogame.ClaimEventRankingRequest, opts ...grpc.CallOption) (*protogame.ClaimEventRankingResponse, error) {
	out := new(protogame.ClaimEventRankingResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ClaimEventRanking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ClaimLoginCampaign(ctx context.Context, in *protogame.ClaimLoginCampaignRequest, opts ...grpc.CallOption) (*protogame.ClaimLoginCampaignResponse, error) {
	out := new(protogame.ClaimLoginCampaignResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ClaimLoginCampaign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ClaimMailboxItem(ctx context.Context, in *protogame.ClaimMailBoxItemRequest, opts ...grpc.CallOption) (*protogame.ClaimMailBoxItemResponse, error) {
	out := new(protogame.ClaimMailBoxItemResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ClaimMailboxItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ClaimAllMailboxItem(ctx context.Context, in *protogame.ClaimAllMailBoxItemRequest, opts ...grpc.CallOption) (*protogame.ClaimAllMailBoxItemResponse, error) {
	out := new(protogame.ClaimAllMailBoxItemResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ClaimAllMailboxItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ClaimDailyMission(ctx context.Context, in *protogame.ClaimDailyMissionRequest, opts ...grpc.CallOption) (*protogame.ClaimDailyMissionResponse, error) {
	out := new(protogame.ClaimDailyMissionResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ClaimDailyMission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ClaimRentalReward(ctx context.Context, in *protogame.ClaimRentalCardRewardRequest, opts ...grpc.CallOption) (*protogame.ClaimRentalCardRewardResponse, error) {
	out := new(protogame.ClaimRentalCardRewardResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ClaimRentalReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ConfirmDailyMission(ctx context.Context, in *protogame.ConfirmDailyMissionRequest, opts ...grpc.CallOption) (*protogame.ConfirmDailyMissionResponse, error) {
	out := new(protogame.ConfirmDailyMissionResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ConfirmDailyMission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) DeckEdit(ctx context.Context, in *protogame.DeckEditAllRequest, opts ...grpc.CallOption) (*protogame.DeckEditAllResponse, error) {
	out := new(protogame.DeckEditAllResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_DeckEdit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) DeleteAllMailboxItem(ctx context.Context, in *protogame.DeleteAllMailboxItemRequest, opts ...grpc.CallOption) (*protogame.DeleteAllMailboxItemResponse, error) {
	out := new(protogame.DeleteAllMailboxItemResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_DeleteAllMailboxItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ExpandAbilityCardSlot(ctx context.Context, in *protogame.ExpandAbilityCardSlotRequest, opts ...grpc.CallOption) (*protogame.ExpandAbilityCardSlotResponse, error) {
	out := new(protogame.ExpandAbilityCardSlotResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ExpandAbilityCardSlot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) FetchPlayerData(ctx context.Context, in *protogame.FetchPlayerDataRequest, opts ...grpc.CallOption) (*protogame.FetchPlayerDataResponse, error) {
	out := new(protogame.FetchPlayerDataResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_FetchPlayerData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) FirstDailyLogin(ctx context.Context, in *protogame.FirstDailyLoginRequest, opts ...grpc.CallOption) (*protogame.FirstDailyLoginResponse, error) {
	out := new(protogame.FirstDailyLoginResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_FirstDailyLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ProcessRegionEvent(ctx context.Context, in *protogame.ProcessRegionEventRequest, opts ...grpc.CallOption) (*protogame.ProcessRegionEventResponse, error) {
	out := new(protogame.ProcessRegionEventResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ProcessRegionEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ProcessRegionNodeEvent(ctx context.Context, in *protogame.ProcessRegionNodeEventRequest, opts ...grpc.CallOption) (*protogame.ProcessRegionEventResponse, error) {
	out := new(protogame.ProcessRegionEventResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ProcessRegionNodeEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) RestoreStamina(ctx context.Context, in *protogame.StaminaRestoreRequest, opts ...grpc.CallOption) (*protogame.StaminaRestoreResponse, error) {
	out := new(protogame.StaminaRestoreResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_RestoreStamina_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) SkillPanelUnlock(ctx context.Context, in *protogame.SkillPanelUnlockRequest, opts ...grpc.CallOption) (*protogame.SkillPanelUnlockResponse, error) {
	out := new(protogame.SkillPanelUnlockResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_SkillPanelUnlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) Teleport(ctx context.Context, in *protogame.TeleportRequest, opts ...grpc.CallOption) (*protogame.TeleportResponse, error) {
	out := new(protogame.TeleportResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_Teleport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) UpdateProfile(ctx context.Context, in *protogame.UpdateProfileRequest, opts ...grpc.CallOption) (*protogame.UpdateProfileResponse, error) {
	out := new(protogame.UpdateProfileResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_UpdateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) PurchaseItem(ctx context.Context, in *protogame.ItemShopItemPurchaseRequest, opts ...grpc.CallOption) (*protogame.ItemShopItemPurchaseResponse, error) {
	out := new(protogame.ItemShopItemPurchaseResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_PurchaseItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) PurchaseCard(ctx context.Context, in *protogame.ItemShopCardPurchaseRequest, opts ...grpc.CallOption) (*protogame.ItemShopCardPurchaseResponse, error) {
	out := new(protogame.ItemShopCardPurchaseResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_PurchaseCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) AbilityShopPurchase(ctx context.Context, in *protogame.AbilityShopPurchaseRequest, opts ...grpc.CallOption) (*protogame.AbilityShopPurchaseResponse, error) {
	out := new(protogame.AbilityShopPurchaseResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_AbilityShopPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) CompleteRegion(ctx context.Context, in *protogame.CompleteRegionMapRequest, opts ...grpc.CallOption) (*protogame.CompleteRegionMapResponse, error) {
	out := new(protogame.CompleteRegionMapResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_CompleteRegion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) UnlockRegion(ctx context.Context, in *protogame.RegionMapUnlockRequest, opts ...grpc.CallOption) (*protogame.RegionMapUnlockResponse, error) {
	out := new(protogame.RegionMapUnlockResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_UnlockRegion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) AbilityCardSummon(ctx context.Context, in *protogame.AbilityCardSummonRequest, opts ...grpc.CallOption) (*protogame.AbilityCardSummonResponse, error) {
	out := new(protogame.AbilityCardSummonResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_AbilityCardSummon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ExecuteDialogue(ctx context.Context, in *protogame.ExecuteDialogueRequest, opts ...grpc.CallOption) (*protogame.ExecuteDialogueResponse, error) {
	out := new(protogame.ExecuteDialogueResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ExecuteDialogue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ClaimItemDistiller(ctx context.Context, in *protogame.ClaimItemDistillerRequest, opts ...grpc.CallOption) (*protogame.ClaimItemDistillerResponse, error) {
	out := new(protogame.ClaimItemDistillerResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ClaimItemDistiller_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meviusGameServiceClient) ClaimDungeon(ctx context.Context, in *protogame.ClaimDungeonRequest, opts ...grpc.CallOption) (*protogame.ClaimDungeonResponse, error) {
	out := new(protogame.ClaimDungeonResponse)
	err := c.cc.Invoke(ctx, MeviusGameService_ClaimDungeon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeviusGameServiceServer is the server API for MeviusGameService service.
// All implementations should embed UnimplementedMeviusGameServiceServer
// for forward compatibility
type MeviusGameServiceServer interface {
	//External
	BattleComplete(context.Context, *protogame.BattleCompleteRequest) (*protogame.BattleCompleteResponse, error)
	BattleRevive(context.Context, *protogame.BattleReviveRequest) (*protogame.BattleReviveResponse, error)
	BattleStart(context.Context, *protogame.BattleStartRequest) (*protogame.BattleStartResponse, error)
	CardAugment(context.Context, *protogame.CardAugmentRequest) (*protogame.CardAugmentResponse, error)
	CardFavourite(context.Context, *protogame.CardFavouriteRequest) (*protogame.CardFavouriteResponse, error)
	CardFusion(context.Context, *protogame.CardFusionRequest) (*protogame.CardFusionResponse, error)
	CardBoostFusion(context.Context, *protogame.CardBoostFusionRequest) (*protogame.CardBoostFusionResponse, error)
	CardSale(context.Context, *protogame.CardSaleRequest) (*protogame.CardSaleResponse, error)
	CardAutoSell(context.Context, *protogame.CardAutoSellRequest) (*protogame.CardAutoSellResponse, error)
	CardTransfer(context.Context, *protogame.CardTransferRequest) (*protogame.CardTransferResponse, error)
	CreateProfile(context.Context, *protogame.CreateProfileRequest) (*protogame.CreateProfileResponse, error)
	ClaimEventRanking(context.Context, *protogame.ClaimEventRankingRequest) (*protogame.ClaimEventRankingResponse, error)
	ClaimLoginCampaign(context.Context, *protogame.ClaimLoginCampaignRequest) (*protogame.ClaimLoginCampaignResponse, error)
	ClaimMailboxItem(context.Context, *protogame.ClaimMailBoxItemRequest) (*protogame.ClaimMailBoxItemResponse, error)
	ClaimAllMailboxItem(context.Context, *protogame.ClaimAllMailBoxItemRequest) (*protogame.ClaimAllMailBoxItemResponse, error)
	ClaimDailyMission(context.Context, *protogame.ClaimDailyMissionRequest) (*protogame.ClaimDailyMissionResponse, error)
	ClaimRentalReward(context.Context, *protogame.ClaimRentalCardRewardRequest) (*protogame.ClaimRentalCardRewardResponse, error)
	ConfirmDailyMission(context.Context, *protogame.ConfirmDailyMissionRequest) (*protogame.ConfirmDailyMissionResponse, error)
	DeckEdit(context.Context, *protogame.DeckEditAllRequest) (*protogame.DeckEditAllResponse, error)
	DeleteAllMailboxItem(context.Context, *protogame.DeleteAllMailboxItemRequest) (*protogame.DeleteAllMailboxItemResponse, error)
	ExpandAbilityCardSlot(context.Context, *protogame.ExpandAbilityCardSlotRequest) (*protogame.ExpandAbilityCardSlotResponse, error)
	FetchPlayerData(context.Context, *protogame.FetchPlayerDataRequest) (*protogame.FetchPlayerDataResponse, error)
	FirstDailyLogin(context.Context, *protogame.FirstDailyLoginRequest) (*protogame.FirstDailyLoginResponse, error)
	ProcessRegionEvent(context.Context, *protogame.ProcessRegionEventRequest) (*protogame.ProcessRegionEventResponse, error)
	ProcessRegionNodeEvent(context.Context, *protogame.ProcessRegionNodeEventRequest) (*protogame.ProcessRegionEventResponse, error)
	RestoreStamina(context.Context, *protogame.StaminaRestoreRequest) (*protogame.StaminaRestoreResponse, error)
	SkillPanelUnlock(context.Context, *protogame.SkillPanelUnlockRequest) (*protogame.SkillPanelUnlockResponse, error)
	Teleport(context.Context, *protogame.TeleportRequest) (*protogame.TeleportResponse, error)
	UpdateProfile(context.Context, *protogame.UpdateProfileRequest) (*protogame.UpdateProfileResponse, error)
	PurchaseItem(context.Context, *protogame.ItemShopItemPurchaseRequest) (*protogame.ItemShopItemPurchaseResponse, error)
	PurchaseCard(context.Context, *protogame.ItemShopCardPurchaseRequest) (*protogame.ItemShopCardPurchaseResponse, error)
	AbilityShopPurchase(context.Context, *protogame.AbilityShopPurchaseRequest) (*protogame.AbilityShopPurchaseResponse, error)
	CompleteRegion(context.Context, *protogame.CompleteRegionMapRequest) (*protogame.CompleteRegionMapResponse, error)
	UnlockRegion(context.Context, *protogame.RegionMapUnlockRequest) (*protogame.RegionMapUnlockResponse, error)
	AbilityCardSummon(context.Context, *protogame.AbilityCardSummonRequest) (*protogame.AbilityCardSummonResponse, error)
	ExecuteDialogue(context.Context, *protogame.ExecuteDialogueRequest) (*protogame.ExecuteDialogueResponse, error)
	ClaimItemDistiller(context.Context, *protogame.ClaimItemDistillerRequest) (*protogame.ClaimItemDistillerResponse, error)
	ClaimDungeon(context.Context, *protogame.ClaimDungeonRequest) (*protogame.ClaimDungeonResponse, error)
}

// UnimplementedMeviusGameServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMeviusGameServiceServer struct {
}

func (UnimplementedMeviusGameServiceServer) BattleComplete(context.Context, *protogame.BattleCompleteRequest) (*protogame.BattleCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattleComplete not implemented")
}
func (UnimplementedMeviusGameServiceServer) BattleRevive(context.Context, *protogame.BattleReviveRequest) (*protogame.BattleReviveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattleRevive not implemented")
}
func (UnimplementedMeviusGameServiceServer) BattleStart(context.Context, *protogame.BattleStartRequest) (*protogame.BattleStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattleStart not implemented")
}
func (UnimplementedMeviusGameServiceServer) CardAugment(context.Context, *protogame.CardAugmentRequest) (*protogame.CardAugmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardAugment not implemented")
}
func (UnimplementedMeviusGameServiceServer) CardFavourite(context.Context, *protogame.CardFavouriteRequest) (*protogame.CardFavouriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardFavourite not implemented")
}
func (UnimplementedMeviusGameServiceServer) CardFusion(context.Context, *protogame.CardFusionRequest) (*protogame.CardFusionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardFusion not implemented")
}
func (UnimplementedMeviusGameServiceServer) CardBoostFusion(context.Context, *protogame.CardBoostFusionRequest) (*protogame.CardBoostFusionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardBoostFusion not implemented")
}
func (UnimplementedMeviusGameServiceServer) CardSale(context.Context, *protogame.CardSaleRequest) (*protogame.CardSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardSale not implemented")
}
func (UnimplementedMeviusGameServiceServer) CardAutoSell(context.Context, *protogame.CardAutoSellRequest) (*protogame.CardAutoSellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardAutoSell not implemented")
}
func (UnimplementedMeviusGameServiceServer) CardTransfer(context.Context, *protogame.CardTransferRequest) (*protogame.CardTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardTransfer not implemented")
}
func (UnimplementedMeviusGameServiceServer) CreateProfile(context.Context, *protogame.CreateProfileRequest) (*protogame.CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedMeviusGameServiceServer) ClaimEventRanking(context.Context, *protogame.ClaimEventRankingRequest) (*protogame.ClaimEventRankingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimEventRanking not implemented")
}
func (UnimplementedMeviusGameServiceServer) ClaimLoginCampaign(context.Context, *protogame.ClaimLoginCampaignRequest) (*protogame.ClaimLoginCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimLoginCampaign not implemented")
}
func (UnimplementedMeviusGameServiceServer) ClaimMailboxItem(context.Context, *protogame.ClaimMailBoxItemRequest) (*protogame.ClaimMailBoxItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimMailboxItem not implemented")
}
func (UnimplementedMeviusGameServiceServer) ClaimAllMailboxItem(context.Context, *protogame.ClaimAllMailBoxItemRequest) (*protogame.ClaimAllMailBoxItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimAllMailboxItem not implemented")
}
func (UnimplementedMeviusGameServiceServer) ClaimDailyMission(context.Context, *protogame.ClaimDailyMissionRequest) (*protogame.ClaimDailyMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimDailyMission not implemented")
}
func (UnimplementedMeviusGameServiceServer) ClaimRentalReward(context.Context, *protogame.ClaimRentalCardRewardRequest) (*protogame.ClaimRentalCardRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRentalReward not implemented")
}
func (UnimplementedMeviusGameServiceServer) ConfirmDailyMission(context.Context, *protogame.ConfirmDailyMissionRequest) (*protogame.ConfirmDailyMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDailyMission not implemented")
}
func (UnimplementedMeviusGameServiceServer) DeckEdit(context.Context, *protogame.DeckEditAllRequest) (*protogame.DeckEditAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeckEdit not implemented")
}
func (UnimplementedMeviusGameServiceServer) DeleteAllMailboxItem(context.Context, *protogame.DeleteAllMailboxItemRequest) (*protogame.DeleteAllMailboxItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMailboxItem not implemented")
}
func (UnimplementedMeviusGameServiceServer) ExpandAbilityCardSlot(context.Context, *protogame.ExpandAbilityCardSlotRequest) (*protogame.ExpandAbilityCardSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandAbilityCardSlot not implemented")
}
func (UnimplementedMeviusGameServiceServer) FetchPlayerData(context.Context, *protogame.FetchPlayerDataRequest) (*protogame.FetchPlayerDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPlayerData not implemented")
}
func (UnimplementedMeviusGameServiceServer) FirstDailyLogin(context.Context, *protogame.FirstDailyLoginRequest) (*protogame.FirstDailyLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirstDailyLogin not implemented")
}
func (UnimplementedMeviusGameServiceServer) ProcessRegionEvent(context.Context, *protogame.ProcessRegionEventRequest) (*protogame.ProcessRegionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRegionEvent not implemented")
}
func (UnimplementedMeviusGameServiceServer) ProcessRegionNodeEvent(context.Context, *protogame.ProcessRegionNodeEventRequest) (*protogame.ProcessRegionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRegionNodeEvent not implemented")
}
func (UnimplementedMeviusGameServiceServer) RestoreStamina(context.Context, *protogame.StaminaRestoreRequest) (*protogame.StaminaRestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreStamina not implemented")
}
func (UnimplementedMeviusGameServiceServer) SkillPanelUnlock(context.Context, *protogame.SkillPanelUnlockRequest) (*protogame.SkillPanelUnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkillPanelUnlock not implemented")
}
func (UnimplementedMeviusGameServiceServer) Teleport(context.Context, *protogame.TeleportRequest) (*protogame.TeleportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Teleport not implemented")
}
func (UnimplementedMeviusGameServiceServer) UpdateProfile(context.Context, *protogame.UpdateProfileRequest) (*protogame.UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedMeviusGameServiceServer) PurchaseItem(context.Context, *protogame.ItemShopItemPurchaseRequest) (*protogame.ItemShopItemPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseItem not implemented")
}
func (UnimplementedMeviusGameServiceServer) PurchaseCard(context.Context, *protogame.ItemShopCardPurchaseRequest) (*protogame.ItemShopCardPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseCard not implemented")
}
func (UnimplementedMeviusGameServiceServer) AbilityShopPurchase(context.Context, *protogame.AbilityShopPurchaseRequest) (*protogame.AbilityShopPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbilityShopPurchase not implemented")
}
func (UnimplementedMeviusGameServiceServer) CompleteRegion(context.Context, *protogame.CompleteRegionMapRequest) (*protogame.CompleteRegionMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRegion not implemented")
}
func (UnimplementedMeviusGameServiceServer) UnlockRegion(context.Context, *protogame.RegionMapUnlockRequest) (*protogame.RegionMapUnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockRegion not implemented")
}
func (UnimplementedMeviusGameServiceServer) AbilityCardSummon(context.Context, *protogame.AbilityCardSummonRequest) (*protogame.AbilityCardSummonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbilityCardSummon not implemented")
}
func (UnimplementedMeviusGameServiceServer) ExecuteDialogue(context.Context, *protogame.ExecuteDialogueRequest) (*protogame.ExecuteDialogueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDialogue not implemented")
}
func (UnimplementedMeviusGameServiceServer) ClaimItemDistiller(context.Context, *protogame.ClaimItemDistillerRequest) (*protogame.ClaimItemDistillerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimItemDistiller not implemented")
}
func (UnimplementedMeviusGameServiceServer) ClaimDungeon(context.Context, *protogame.ClaimDungeonRequest) (*protogame.ClaimDungeonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimDungeon not implemented")
}

// UnsafeMeviusGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeviusGameServiceServer will
// result in compilation errors.
type UnsafeMeviusGameServiceServer interface {
	mustEmbedUnimplementedMeviusGameServiceServer()
}

func RegisterMeviusGameServiceServer(s grpc.ServiceRegistrar, srv MeviusGameServiceServer) {
	s.RegisterService(&MeviusGameService_ServiceDesc, srv)
}

func _MeviusGameService_BattleComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.BattleCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).BattleComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_BattleComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).BattleComplete(ctx, req.(*protogame.BattleCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_BattleRevive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.BattleReviveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).BattleRevive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_BattleRevive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).BattleRevive(ctx, req.(*protogame.BattleReviveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_BattleStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.BattleStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).BattleStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_BattleStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).BattleStart(ctx, req.(*protogame.BattleStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CardAugment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.CardAugmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CardAugment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_CardAugment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CardAugment(ctx, req.(*protogame.CardAugmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CardFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.CardFavouriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CardFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_CardFavourite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CardFavourite(ctx, req.(*protogame.CardFavouriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CardFusion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.CardFusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CardFusion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_CardFusion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CardFusion(ctx, req.(*protogame.CardFusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CardBoostFusion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.CardBoostFusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CardBoostFusion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_CardBoostFusion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CardBoostFusion(ctx, req.(*protogame.CardBoostFusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CardSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.CardSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CardSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_CardSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CardSale(ctx, req.(*protogame.CardSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CardAutoSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.CardAutoSellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CardAutoSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_CardAutoSell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CardAutoSell(ctx, req.(*protogame.CardAutoSellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CardTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.CardTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CardTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_CardTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CardTransfer(ctx, req.(*protogame.CardTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CreateProfile(ctx, req.(*protogame.CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ClaimEventRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ClaimEventRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ClaimEventRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ClaimEventRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ClaimEventRanking(ctx, req.(*protogame.ClaimEventRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ClaimLoginCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ClaimLoginCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ClaimLoginCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ClaimLoginCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ClaimLoginCampaign(ctx, req.(*protogame.ClaimLoginCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ClaimMailboxItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ClaimMailBoxItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ClaimMailboxItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ClaimMailboxItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ClaimMailboxItem(ctx, req.(*protogame.ClaimMailBoxItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ClaimAllMailboxItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ClaimAllMailBoxItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ClaimAllMailboxItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ClaimAllMailboxItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ClaimAllMailboxItem(ctx, req.(*protogame.ClaimAllMailBoxItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ClaimDailyMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ClaimDailyMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ClaimDailyMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ClaimDailyMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ClaimDailyMission(ctx, req.(*protogame.ClaimDailyMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ClaimRentalReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ClaimRentalCardRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ClaimRentalReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ClaimRentalReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ClaimRentalReward(ctx, req.(*protogame.ClaimRentalCardRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ConfirmDailyMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ConfirmDailyMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ConfirmDailyMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ConfirmDailyMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ConfirmDailyMission(ctx, req.(*protogame.ConfirmDailyMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_DeckEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.DeckEditAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).DeckEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_DeckEdit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).DeckEdit(ctx, req.(*protogame.DeckEditAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_DeleteAllMailboxItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.DeleteAllMailboxItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).DeleteAllMailboxItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_DeleteAllMailboxItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).DeleteAllMailboxItem(ctx, req.(*protogame.DeleteAllMailboxItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ExpandAbilityCardSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ExpandAbilityCardSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ExpandAbilityCardSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ExpandAbilityCardSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ExpandAbilityCardSlot(ctx, req.(*protogame.ExpandAbilityCardSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_FetchPlayerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.FetchPlayerDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).FetchPlayerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_FetchPlayerData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).FetchPlayerData(ctx, req.(*protogame.FetchPlayerDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_FirstDailyLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.FirstDailyLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).FirstDailyLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_FirstDailyLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).FirstDailyLogin(ctx, req.(*protogame.FirstDailyLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ProcessRegionEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ProcessRegionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ProcessRegionEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ProcessRegionEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ProcessRegionEvent(ctx, req.(*protogame.ProcessRegionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ProcessRegionNodeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ProcessRegionNodeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ProcessRegionNodeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ProcessRegionNodeEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ProcessRegionNodeEvent(ctx, req.(*protogame.ProcessRegionNodeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_RestoreStamina_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.StaminaRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).RestoreStamina(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_RestoreStamina_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).RestoreStamina(ctx, req.(*protogame.StaminaRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_SkillPanelUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.SkillPanelUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).SkillPanelUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_SkillPanelUnlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).SkillPanelUnlock(ctx, req.(*protogame.SkillPanelUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_Teleport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.TeleportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).Teleport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_Teleport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).Teleport(ctx, req.(*protogame.TeleportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).UpdateProfile(ctx, req.(*protogame.UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_PurchaseItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ItemShopItemPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).PurchaseItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_PurchaseItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).PurchaseItem(ctx, req.(*protogame.ItemShopItemPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_PurchaseCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ItemShopCardPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).PurchaseCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_PurchaseCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).PurchaseCard(ctx, req.(*protogame.ItemShopCardPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_AbilityShopPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.AbilityShopPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).AbilityShopPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_AbilityShopPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).AbilityShopPurchase(ctx, req.(*protogame.AbilityShopPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_CompleteRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.CompleteRegionMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).CompleteRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_CompleteRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).CompleteRegion(ctx, req.(*protogame.CompleteRegionMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_UnlockRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.RegionMapUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).UnlockRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_UnlockRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).UnlockRegion(ctx, req.(*protogame.RegionMapUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_AbilityCardSummon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.AbilityCardSummonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).AbilityCardSummon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_AbilityCardSummon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).AbilityCardSummon(ctx, req.(*protogame.AbilityCardSummonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ExecuteDialogue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ExecuteDialogueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ExecuteDialogue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ExecuteDialogue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ExecuteDialogue(ctx, req.(*protogame.ExecuteDialogueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ClaimItemDistiller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ClaimItemDistillerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ClaimItemDistiller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ClaimItemDistiller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ClaimItemDistiller(ctx, req.(*protogame.ClaimItemDistillerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeviusGameService_ClaimDungeon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protogame.ClaimDungeonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeviusGameServiceServer).ClaimDungeon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeviusGameService_ClaimDungeon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeviusGameServiceServer).ClaimDungeon(ctx, req.(*protogame.ClaimDungeonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeviusGameService_ServiceDesc is the grpc.ServiceDesc for MeviusGameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeviusGameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.MeviusGameService",
	HandlerType: (*MeviusGameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BattleComplete",
			Handler:    _MeviusGameService_BattleComplete_Handler,
		},
		{
			MethodName: "BattleRevive",
			Handler:    _MeviusGameService_BattleRevive_Handler,
		},
		{
			MethodName: "BattleStart",
			Handler:    _MeviusGameService_BattleStart_Handler,
		},
		{
			MethodName: "CardAugment",
			Handler:    _MeviusGameService_CardAugment_Handler,
		},
		{
			MethodName: "CardFavourite",
			Handler:    _MeviusGameService_CardFavourite_Handler,
		},
		{
			MethodName: "CardFusion",
			Handler:    _MeviusGameService_CardFusion_Handler,
		},
		{
			MethodName: "CardBoostFusion",
			Handler:    _MeviusGameService_CardBoostFusion_Handler,
		},
		{
			MethodName: "CardSale",
			Handler:    _MeviusGameService_CardSale_Handler,
		},
		{
			MethodName: "CardAutoSell",
			Handler:    _MeviusGameService_CardAutoSell_Handler,
		},
		{
			MethodName: "CardTransfer",
			Handler:    _MeviusGameService_CardTransfer_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _MeviusGameService_CreateProfile_Handler,
		},
		{
			MethodName: "ClaimEventRanking",
			Handler:    _MeviusGameService_ClaimEventRanking_Handler,
		},
		{
			MethodName: "ClaimLoginCampaign",
			Handler:    _MeviusGameService_ClaimLoginCampaign_Handler,
		},
		{
			MethodName: "ClaimMailboxItem",
			Handler:    _MeviusGameService_ClaimMailboxItem_Handler,
		},
		{
			MethodName: "ClaimAllMailboxItem",
			Handler:    _MeviusGameService_ClaimAllMailboxItem_Handler,
		},
		{
			MethodName: "ClaimDailyMission",
			Handler:    _MeviusGameService_ClaimDailyMission_Handler,
		},
		{
			MethodName: "ClaimRentalReward",
			Handler:    _MeviusGameService_ClaimRentalReward_Handler,
		},
		{
			MethodName: "ConfirmDailyMission",
			Handler:    _MeviusGameService_ConfirmDailyMission_Handler,
		},
		{
			MethodName: "DeckEdit",
			Handler:    _MeviusGameService_DeckEdit_Handler,
		},
		{
			MethodName: "DeleteAllMailboxItem",
			Handler:    _MeviusGameService_DeleteAllMailboxItem_Handler,
		},
		{
			MethodName: "ExpandAbilityCardSlot",
			Handler:    _MeviusGameService_ExpandAbilityCardSlot_Handler,
		},
		{
			MethodName: "FetchPlayerData",
			Handler:    _MeviusGameService_FetchPlayerData_Handler,
		},
		{
			MethodName: "FirstDailyLogin",
			Handler:    _MeviusGameService_FirstDailyLogin_Handler,
		},
		{
			MethodName: "ProcessRegionEvent",
			Handler:    _MeviusGameService_ProcessRegionEvent_Handler,
		},
		{
			MethodName: "ProcessRegionNodeEvent",
			Handler:    _MeviusGameService_ProcessRegionNodeEvent_Handler,
		},
		{
			MethodName: "RestoreStamina",
			Handler:    _MeviusGameService_RestoreStamina_Handler,
		},
		{
			MethodName: "SkillPanelUnlock",
			Handler:    _MeviusGameService_SkillPanelUnlock_Handler,
		},
		{
			MethodName: "Teleport",
			Handler:    _MeviusGameService_Teleport_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _MeviusGameService_UpdateProfile_Handler,
		},
		{
			MethodName: "PurchaseItem",
			Handler:    _MeviusGameService_PurchaseItem_Handler,
		},
		{
			MethodName: "PurchaseCard",
			Handler:    _MeviusGameService_PurchaseCard_Handler,
		},
		{
			MethodName: "AbilityShopPurchase",
			Handler:    _MeviusGameService_AbilityShopPurchase_Handler,
		},
		{
			MethodName: "CompleteRegion",
			Handler:    _MeviusGameService_CompleteRegion_Handler,
		},
		{
			MethodName: "UnlockRegion",
			Handler:    _MeviusGameService_UnlockRegion_Handler,
		},
		{
			MethodName: "AbilityCardSummon",
			Handler:    _MeviusGameService_AbilityCardSummon_Handler,
		},
		{
			MethodName: "ExecuteDialogue",
			Handler:    _MeviusGameService_ExecuteDialogue_Handler,
		},
		{
			MethodName: "ClaimItemDistiller",
			Handler:    _MeviusGameService_ClaimItemDistiller_Handler,
		},
		{
			MethodName: "ClaimDungeon",
			Handler:    _MeviusGameService_ClaimDungeon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/game.service.proto",
}
